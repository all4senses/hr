<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Constants for ratins titles, etc.
 */

//module_load_include('inc', 'hr_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function hr_misc_menu() {
  
  hr_misc_setPagesToShow410($items);
  //dpm($items);
  
 
  $items['set-last-updated-date'] = array(
    'title' => 'Set Last Updated Date',
    'page callback' => 'hr_misc_setLastUpdatedDate',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['upd-titles-date'] = array(
    'title' => 'Update prefaces dates in titles',
    'page callback' => 'hr_misc_updatePrefacesTitlesDate',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  
  
  $items['cc'] = array(
    'title' => 'Flush the cache and redirect to the Home page',
    'page callback' => 'hr_misc_flushCache',
    //'access arguments' => array('access content'),
    'access callback' => 'hr_misc_userIsAdmin',
    'type' => MENU_CALLBACK,
  );
  
  $items['securimage_show'] = array(
    'title' => 'Securimage',
    'page callback' => 'hr_misc_securimage_show_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['request'] = array(
    'title' => 'Make a request',
    'page callback' => 'hr_misc_makeRequest_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['check_ctcaptcha'] = array(
    'title' => 'Check CT Captcha',
    'page callback' => 'hr_misc_checkCtCaptcha_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  // Old version.
  /*
  $items['click'] = array(
    'title' => 'Redirect to an external link',
    'page callback' => 'hr_misc_goToExternalUrl',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  */
  
  $items['click/%'] = array(
    'title' => 'Redirect to an external link',
    'page callback' => 'hr_misc_goToExternalUrl2',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['click-a'] = array(
    'title' => 'Track a click',
    'page callback' => 'hr_misc_trackClick_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['referer'] = array(
    'title' => 'Set user external referer',
    'page callback' => 'hr_misc_setReferer_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  
  $items['get-disqus-users'] = array(
    'title' => 'Get new Disqus users',
    'page callback' => 'hr_misc_disqus_getNewUsers',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  ); 
  /*
  $items['get/iframe/business-voip-chart'] = array(
    'title' => 'Top Business VoIP Providers',
    'page callback' => 'hr_misc_getIframe_TopProvidersBu',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['get/iframe/quote-request-block'] = array(
    'title' => 'Quote Request Block',
    'page callback' => 'hr_misc_getIframe_QuoteRequestBlock',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
//  $items['request-test'] = array(
//    'page callback' => 'hr_misc_testPage_requestTest',
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK,
//  );
  

  $items['request/capture'] = array(
    'title' => 'Capture users data on the fly before submitting a request',
    'page callback' => 'hr_misc_makeRequestCapture_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
    
  */
  $items['admin/content/rebuild-providers-sprites'] = array(
    'title' => 'Regenerate providers sprites',
    'page callback' => 'hr_misc_rebuildProvidersLogosSprites',
    //'access arguments' => array('administer content'),
    'access callback' => 'hr_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/content/reviews-to-approve'] = array(
    'title' => 'Reviews to Approve',
    'page callback' => 'hr_misc_gotoReviewsToApprove',
    //'access arguments' => array('administer content'),
    'access callback' => 'hr_misc_userIsAdmin',
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['approve/%/%'] = array(
    'title' => 'Approve content',
    'page callback' => 'hr_misc_approveContent',
    'page arguments' => array(1,2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'hr_misc_testPage',
    //'access arguments' => array('administer content'),
    'access arguments' => array('administer taxonomy'), 
    'type' => MENU_CALLBACK,
  );
  
  
  
  
  return $items;
}


/**
 * Hook menu alter.
 *
 */
function hr_misc_menu_alter(&$items) {
  // Example - disable the page at node/add
  //$items['node/add']['access callback'] = FALSE;
  
  // Remove all Tagadelic urls.
  //////unset($items['tagadelic'], $items['tagadelic/list/%tagadelic_vocs'], $items['tagadelic/chunk/%tagadelic_vocs']);
  
  /*
  $keys = array_keys($items);
  foreach($keys as $key) {
    if (strpos($key, 'taxonomy/term/') !== FALSE) {
      $keys2[] = $key;
    }
  }
  dpr($keys2);
  exit();
  */
  
  //unset($items['taxonomy/term/%taxonomy_term']);
  unset($items['taxonomy/term/%taxonomy_term/view']);
  unset($items['taxonomy/term/%taxonomy_term/feed']); // If you want to hide the feed as well.
}


/**
 * Set last Updated date at  /set-last-updated-date
 */
function hr_misc_setLastUpdatedDate() {
  
  //$current_time = date('F d, Y \a\t g:ia', time());
  $current_time = date('F j, Y', time());
  
  // Save a date ib the variable
  variable_set('hr_last_updated_date', $current_time);
  
  
  
  
  //drupal_flush_all_caches();
  
  // Not so hard reset...

  // The code from function views_invalidate_cache()
  // Clear the views cache.
  cache_clear_all('*', 'cache_views', TRUE);
  // Clear the page and block cache.
  cache_clear_all();
  // Allow modules to respond to the Views cache being cleared.
  module_invoke_all('views_invalidate_cache');
  
  cache_clear_all('*', 'cache_views_data', TRUE);
  
  // Function from the module boost.
  boost_flush_caches();
  
  
  drupal_set_message('The last updated date is set to ' . $current_time);
  drupal_set_message('Header date is updadet. Cache is flushed.', 'warning');
  drupal_goto('');
}


/**
 * Update prefaces dates in titles at /upd-titles-date
 */
function hr_misc_updatePrefacesTitlesDate() {
  
  //$current_time = date('F d, Y \a\t g:ia', time());
  $current_time = date('F j, Y', time());
  $prefaces_nids = array(80, 137);
  
  foreach ($prefaces_nids as $nid) {
    //$node = node_load($nid);
    //$node->title = preg_replace('|^(.*) - Last Updated (.*)$|', '$1 - Last Updated ' . $current_time, $node->title);
    //dpm($node->title);
    
    //dpm($node);
    //node_save($node);
    
    
    
    $query = db_select('node', 'n');
    $query->fields('n', array('title'))
        ->condition('nid', $nid);
    
    $title = $query->execute()->fetchField();
  
    $title = preg_replace('|^(.*) - Last Updated (.*)$|', '$1 - Last Updated ' . $current_time, $title);
    //dpm($title);
    db_update('node')
      ->fields(array(
        'title' => $title,
      ))
      ->condition('nid', $nid)
      ->execute();
  
    db_update('node_revision')
      ->fields(array(
        'title' => $title,
      ))
      ->condition('nid', $nid)
      ->execute();
  
  }
  
  
  //drupal_flush_all_caches();
  
  // Not so hard reset...

  // The code from function views_invalidate_cache()
  // Clear the views cache.
  cache_clear_all('*', 'cache_views', TRUE);
  // Clear the page and block cache.
  cache_clear_all();
  // Allow modules to respond to the Views cache being cleared.
  module_invoke_all('views_invalidate_cache');
  
  cache_clear_all('*', 'cache_views_data', TRUE);
  
  // Function from the module boost.
  boost_flush_caches();
  
  
  drupal_set_message('Header date is updadet. Cache is flushed.', 'warning');
  drupal_goto('');
}


/**
 * Define pages (urls) that should be shown as Gone 410 (instead of 404)
 */
function hr_misc_setPagesToShow410(&$items) {
  
  $pages410 = unserialize(PAGES_410);
  // best-voip-service-providers is now best-voip-service-providers-old OR node/453
  
  
  foreach ($pages410 as $page) {
    $items[$page] = array(
      'title' => 'The Page is Gone (410)',
      'page callback' => 'hr_misc_410gone',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
    );
  }
 
}


/**
 * Return 410 gone for the current page.
 */
function hr_misc_410gone() {
  hr_misc_drupal_410_gone();
  drupal_exit();
}


/**
 * Custom page not found 404.
 * Fix for a standard drupal_not_found
 */
function hr_misc_drupal_410_gone() {
  
  
  // Disable boost caching for custom hr page not found pages.
  // First part, initialization.
  // See the second part at hr_misc_process_html(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $hr_page_not_found;
  $hr_page_not_found = TRUE;
  
  
  
  
  
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  drupal_add_http_header('Status', '410 Gone');

  watchdog('page is gone', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Check for and return a fast 404 page if configured.
  ////drupal_fast_404();

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_GET['destination'])) {
    $_GET['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));
  if ($path && $path != $_GET['q']) {
    // Custom 404 handler. Set the active item in case there are tabs to
    // display, or other dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path, FALSE);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    // Standard 404 handler.
    ////drupal_set_title(t('Page not found'));
    ////$return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
    
    drupal_set_title('Page Is Gone');
    
    $return = hr_mics_page404CustomContent();
  }

  //drupal_set_title('Page Is Gone');
  //dpm($return);
  drupal_set_page_content($return);
  $page = element_info('page');
  //dpm($page);
  print drupal_render_page($page);

  // Perform end-of-request tasks.
  drupal_page_footer();
}


function hr_mics_page404CustomContent() {
  
    /*
    $sitemap_body = cache_get('hr_sitemap_body');
    if (!$sitemap_body || empty($sitemap_body->data)) {
      $key = 'view-sitemap-page';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $sitemap_body = $query->execute()->fetchField(); 

      // Remove preface text from a Sitemap body.
      if(preg_match('/.*(<table.*)/s', $sitemap_body, $matches)) {
        $sitemap_body = $matches[1];
      }
            
      cache_set('hr_sitemap_body', $sitemap_body);
    }
    else {
      $sitemap_body = $sitemap_body->data;
    }
    */
  
    $page404_body = cache_get('hr_page404');
    if (!$page404_body || empty($page404_body->data)) {
      $key = 'page-not-found';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $page404_body = $query->execute()->fetchField(); 

      cache_set('hr_page404', $page404_body);
    }
    else {
      $page404_body = $page404_body->data;
    }
    
    return '<div class="main-content page404"> 
      <div class="content page preface">' . $page404_body 
            . hr_blocks_getBlockThemed(array('module' => 'search', 'delta' => 'search-form', 'no_subject' => TRUE, 'class' => 'search-on-404', 'shadow' => FALSE)) 
            . '<br/><p>Or, try one of the links below.</p>'
            . '<div class="sitemap field-name-body">' . $sitemap_body . '</div>
      </div>
  </div>';

}


/**
 * Returns recommendations counts for pos and neg.
 */
function hr_misc_getVotesRecommendPosVsNeg($nid) {
  
    $query = db_select('votingapi_vote', 'v')
      ->fields('v', array('value'));
    $query->condition('entity_id', $nid);
    $query->condition('value_type', 'percent');
    $query->condition('tag', 'recommend');
    
    $results = $query->execute()->fetchCol();

    $recommend = array('positive' => 0, 'negative' => 0);
    foreach ($results as $result) {
      if ($result) {
        $recommend['positive'] += 1;
      }
      else {
        $recommend['negative'] += 1;
      }
    }
        
    return $recommend;
}


function hr_misc_securimage_show_ajax() {

  //require_once dirname(__FILE__) . '/securimage.php';
  
  require_once '/home/chadmin/public_html/sites/all/libraries/jquery.plugins/securimage/securimage.php';

  
  
  $img = new Securimage();

  $img->show();  // outputs the image and content headers to the browser
}


/**
 * Implements Hook Process Html.
 * Minify html on the fly.
 */
function hr_misc_process_html(&$vars) {
  
  
  // Disable boost caching for custom hr page not found pages.
  // First part, initialization.
  // See the second part at hr_misc_preprocess_page(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $_boost;
  global $hr_page_not_found;

  if ($hr_page_not_found) {
    $_boost['cache_this'] = FALSE;
  }

  
  
  
  global $user;
  
  if (!$user->uid) {
    
      // Minify a Html Page content.
      $vars['page'] = preg_replace(
        array(
          '/ {2,}/',
          '/<!--.*?-->|\t|(?:\r?\n[ \t]*)+/s',
        ),
        array(
          ' ',
          '',
        ),
        $vars['page']
      );

  }
  else {
    //dpm($vars);
  }
  
}


/**
 * Implementing hook_js_alter
 * @param $javascript
 */
function hr_misc_js_alter(&$javascript) {
  // uncomment to minify
  return;
  ////global $user;
  ////if (!$user->uid) {
    
    // Minify all js on the page.
    
    $add_to_minified = NULL;
    $from_scratch = FALSE;
    
    $hr_minified_js = variable_get('hr_minified_js');
    
    if ($hr_minified_js) {
      foreach($javascript as $filename => $attr){
        
        if (isset($hr_minified_js[$filename])) {
          $javascript[$filename]['data'] = $hr_minified_js[$filename];
        }
        elseif (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'jsmin-hr')) {
          $add_to_minified[$filename] = $attr;
        }
      }
    }
    else {
      $add_to_minified = $javascript;
      $from_scratch = TRUE;
    }
    
    // Create minified version of js files, not yet created.
    if($add_to_minified) {

      include_once DRUPAL_ROOT . '/sites/all/libraries/minify/min/lib/JSMin.php';
    
      foreach($add_to_minified as $filename => $attr){

        if(!$from_scratch || (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'jsmin-hr'))) {

          $source_fpath_short = $attr['data'];
          $source_fpath = DRUPAL_ROOT . '/' . $source_fpath_short;

          if ($source_content = file_get_contents($source_fpath)) {
            if ($minOutput = JSMin::minify($source_content)) {
              $target_path_short = 'f/jsmin-hr/' . str_replace('/', '-', $source_fpath_short);
              if (file_put_contents(DRUPAL_ROOT . '/' . $target_path_short, $minOutput)) {
                $hr_minified_js[$filename] = $target_path_short;
                $javascript[$filename]['data'] = $hr_minified_js[$filename];
              }
            }
          }

        } // End of if(strpos($filename, '.js') && !strpos($attr['data'], "min.js") && !strpos($attr['data'], "jsmin-hr")) {

      } // End of foreach($javascript as $filename => $attr){
      
      variable_set('hr_minified_js', $hr_minified_js);
    } // End of if($add_to_minified) {
      
    
    // Replace js with min.js
//    foreach($javascript as $filename => $attr) {
//      if (isset($hr_minified_js[$filename])) {
//        $javascript[$filename]['data'] = $hr_minified_js[$filename];
//      }
//    }
    
    
  ////} // End of if ($user->uid != 1) {

}


/**
 * Implements hook_flush_caches().
 */
function hr_misc_flush_caches() {
  
  // Remove all minified files from jsmin-hr folder.
  // Uncomment in case of changing any js
  /*
  $dir = 'f/jsmin-hr';
  $objects = scandir($dir);
  foreach ($objects as $object) {
    if ($object != "." && $object != "..") {
      unlink($dir . "/" . $object);
    }
  }
  */
  // No need to really delete files, as they will be rewritten anyways
  // So we just have to clear the variable.
  variable_del('hr_minified_js');
  
  
  // Recalculate the reviews amount.
//  $query = db_select('votingapi_vote', 'v');
//  $query->condition('v.value_type', 'percent')
//        ->condition('v.tag', 'overall');
//  //$votes = $query->execute();
//  $countQuery = $query->countQuery();
//  $num_votes = $countQuery->execute()->fetchField();
//  variable_set('hr_allReviewsAmount', $num_votes + 100);
  
  // Reset blog archive block content.
  // This view is completely disabled for now, so i'm not sure why do we wo this here :)
  /*
  $view = views_get_view('archive');
  $view->preview('block_blog_summary');
  $blog_summary = '';
  if (!empty($view->result)) {
    foreach ($view->result as $item) {
      $url = preg_replace('/^(.*)(....)(..)$/', '$1$2/$3', $item->url);
      $url = str_replace('http://hostingreview.org/', '', $url);
      $blog_summary .= '<li><a href="/' . $url . '">' . $item->link . '</a></li>';
    }

    variable_set('hr_blog_summary', $blog_summary);
  }
  */
  
}


/**
 * Flush the cache and redirect to the Home page.
 */
function hr_misc_flushCache() {
  drupal_flush_all_caches();
  drupal_set_message('Cache is flushed.', 'warning');
  drupal_goto('');
}


/**
 * 
 * User permissions access calback function for the admin.
 * 
 */
function hr_misc_userIsAdmin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Build the tracking url.
 */
function hr_misc_getTrackingUrl($title_or_wrapped_object, $subpath = NULL, $nid = NULL, $target_name = NULL, $a_class = NULL, $service_type = NULL) {
  
  // v1
  //$trackingUrl = l($title_or_wrapped_object, 'click', array('query' => array('p' => urlencode($target_name)), 'attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
  
  
  // v2
  //$trackingUrl = l($title_or_wrapped_object, 'click' . $subpath, array('attributes' => array('rel' => 'nofollow', 'target' => '_blank')));
  
  if (!$subpath) {
    if ($nid) {
      $query = db_select('url_alias', 'a')
        ->fields('a', array('alias'));
      $query->condition('a.source', 'node/' . $nid);
      $subpath = '/' . $query->execute()->fetchField();
    }
    else {
      $subpath = $_SERVER['REDIRECT_URL'];
    }
  }
  
  
  // Make a path looks like /go/nextiva
  $subpath = str_replace('reviews/', '', $subpath);
  
  
  if ($service_type) {
    $subpath .= '/' . $service_type;
  }
  
  $trackingUrl = '<a href="/click' . $subpath . '" target = "_blank"' . ($a_class ? ' class="' . $a_class . '"' : '') . ' rel="nofollow">' . $title_or_wrapped_object . '</a>';
  
  return $trackingUrl;
}


/**
 * Track a click.
 */
/* Old version
function hr_misc_trackClick_ajax() {
  
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  if (!empty($post['type']) && !empty($post['url'])) {
    
      global $user;
      $data = NULL;
//      $data = serialize(array(
//        'referer' => @$_SESSION['hr_current_http_referer'],
//        'click_page' => $post['click_page'],
//        'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//      ));

      db_insert('hr_track_links')
        ->fields(array(
          'object_id' => str_replace('oid', '', $post['oid']),
          'type' => $post['type'],
          'object_name' => $post['title'],
          'url' => $post['url'],
          'timestamp' => time(),
          
          'referer' => @$_SESSION['hr_current_http_referer'],
          'click_page' => $post['click_page'],
          'uname' => $user->name,
          'ip' => $user->hostname,
            
          'data' => $data,
        ))
        ->execute();

  }
  
  drupal_json_output(array('status' => $status));
}
*/


/**
 * Redirect to an external url and track the data without params.
 */
function hr_misc_goToExternalUrl2() {

  $args = arg();
  
  //dpm($args);
  
  //if ($args[1] == 'reviews' && !empty($args[2])) {
  if (!empty($args[1])) {
    
    $query = db_select('url_alias', 'a')
        ->fields('a', array('source'));
    //$query->condition('a.alias', $args[1] .  '/' . $args[2]);
    $query->condition('a.alias', 'reviews/' . $args[1]);
    $node_id = str_replace('node/', '', $query->execute()->fetchField());

    $query = db_select('field_data_field_p_data_quick', 'pd');
    $query->condition('pd.entity_id', $node_id);
    $query->fields('pd', array('entity_id', 'field_p_data_quick_value'));
    $p_data_quick = $query->execute()->fetchObject();

    //dpm($p_data_quick);
    
    if ($p_data_quick) {
      
      $object_id = $p_data_quick->entity_id;
      $p_data_quick = unserialize($p_data_quick->field_p_data_quick_value);
      $object_name = $p_data_quick['name'];
      
      if (!empty($args[2]) && !empty($p_data_quick[$args[2]]['s-url'])) {
        $url = $p_data_quick[$args[2]]['s-url'];
      }
      else {
        $url = $p_data_quick['i_web'];
      }
    }
    
    
    if (@$url) {
          
            global $user;
            if (!empty($args[2]) && !empty($service_types[$args[2]])) {
              $service_types = unserialize(SERVICE_TYPES);
              $data = array('Service type' => $service_types[$args[2]]);
            }
            else {
              $data = NULL;
            }
            
//            $data = serialize(array(
//              'referer' => @$_SESSION['hr_current_http_referer'],
//              'click_on_page' => @$_SERVER['HTTP_REFERER'],
//              'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//            ));

            db_insert('hr_track_links')
              ->fields(array(
                'object_id' => $object_id,
                'type' => 'provider_link',
                'object_name' => $object_name,
                'url' => $url,
                'timestamp' => time(),
                  
                'referer' => @$_SESSION['hr_current_http_referer'],
                'click_page' => @$_SERVER['HTTP_REFERER'],
                'uname' => isset($user->name) ? $user->name : '',
                'ip' => $user->hostname,
          
                'data' => serialize($data),
              ))
              ->execute();
            
            drupal_goto( (strpos($url, 'http') !== FALSE ? $url : 'http://' . $url), array('external' => TRUE), 301);
        }
     
    
  }
  
  drupal_goto(@$_SERVER['HTTP_REFERER']);
  
  return '';
}


/**
 * Redirect to an external url and track the data.
 */
function hr_misc_goToExternalUrl() {
  
  //dpm($_SESSION['hr_current_http_referer']);
  //dpm($_GET);
  
  // Save a tracked redirection.
  if (!empty($_GET['p']) /* && !empty($_GET['url'])*/) {
    
    //switch ($_GET['p']) {
      
      //case 'provider':
        
        $query = db_select('field_data_field_p_name', 'pn');
          //->fields('pn', array(''))
        $query->condition('pn.bundle', 'provider');
        $query->condition('pn.field_p_name_value', urldecode($_GET['p']));
        $query->leftJoin('field_data_field_p_data_quick', 'pd', 'pd.entity_id = pn.entity_id');
        $query->fields('pd', array('entity_id', 'field_p_data_quick_value'));
        $p_data_quick = $query->execute()->fetchObject();
        
        if ($p_data_quick) {
          $object_id = $p_data_quick->entity_id;
          $p_data_quick = unserialize($p_data_quick->field_p_data_quick_value);
          $object_name = $p_data_quick['name'];
          $url = $p_data_quick['i_web'];
        }
    
        if (@$url) {
          
            global $user;
            $data = NULL;
//            $data = serialize(array(
//              'referer' => @$_SESSION['hr_current_http_referer'],
//              'click_on_page' => @$_SERVER['HTTP_REFERER'],
//              'user' => array('name' => $user->name, 'hostname' => $user->hostname),
//            ));

            db_insert('hr_track_links')
              ->fields(array(
                'object_id' => $object_id,
                'type' => 'provider_link',
                'object_name' => $object_name,
                'url' => $url,
                'timestamp' => time(),
                  
                'referer' => @$_SESSION['hr_current_http_referer'],
                'click_page' => @$_SERVER['HTTP_REFERER'],
                'uname' => isset($user->name) ? $user->name : '',
                'ip' => $user->hostname,
          
                'data' => $data,
              ))
              ->execute();
            
            drupal_goto( (strpos($url, 'http') !== FALSE ? $url : 'http://' . $url), array('external' => TRUE), 301);
        }
        
        //break;
    //}
  }
  
  drupal_goto(@$_SERVER['HTTP_REFERER']);
  
  return '';
}


/**
 * Set a current user external referer.
 */
function hr_misc_setReferer_ajax() {
  
  $status = TRUE;
  $output = '';
  
  $post = array();
//  foreach ($_POST as $key => $value) {
//    $post[$key] = check_plain(strip_tags($value));
//  }
  
  $post['referer'] = check_plain(strip_tags($_POST['referer']));
  if (!empty($post['referer']) && strpos($post['referer'], 'http://hostingreview.org') === FALSE) {
    $_SESSION['hr_current_http_referer'] = $post['referer'];
  }
  
  drupal_json_output(array('status' => $status, /*'data' => $output*/));
}


/**
 * Get new users from Disqus and update local variable/db.
 */
function hr_misc_disqus_getNewUsers() {
  
  $out = 'No new Disqus users this time.';
  
  $hr_disqus_users = unserialize(variable_get('hr_disqus_users', serialize(array())));
  
  $new_hr_disqus_users = hr_misc_disqus_getUsers();
  //dpm($new_hr_disqus_users);
  
  if ($hr_disqus_users != $new_hr_disqus_users) {
    
    $new_users = array_diff_key($new_hr_disqus_users, $hr_disqus_users);
    
    $hr_disqus_users += $new_hr_disqus_users;
    variable_set('hr_disqus_users', serialize($hr_disqus_users));
    
    
    if (!empty($new_users)) {
      $new_users = print_r($new_users, TRUE);
      $out = 'Something has changed (new users, less users, etc).
 

<pre>' . $new_users . '</pre>';
    }
    
  }
  
  global $language;
  $params['report'] = $out;
  drupal_mail('hr_misc', 'new_disqus_user', 'all4senses@gmail.com', $language->language, $params);
  //dpm(unserialize(variable_get('hr_disqus_users')));
  
  //return $out;
  echo $out;
}

  
/**
 * Get users from Disqus.
 */
function hr_misc_disqus_getUsers($next_id = NULL) {

  $remote_users = array();
  
  //dpm($next_id);
  
  $url = 'https://disqus.com/api/3.0/forums/listUsers.json?' . 
    'forum=bestwebhosting' .
    '&limit=100' .
    ($next_id ? '&since_id=' . $next_id : '') .
    '&api_secret=4tW1kaATd4cM96e5j18TK7LETBOLVifA2hXakYtB2Ugys0KVnW5aAIhvMIzzwJ4n'
    ;
  
  $data_from = hr_misc_curlGET($url);
  
  if ($data_from) {
    $data_from = json_decode($data_from);
    //dpm($data_from);
    if (!$data_from->code) {
      
      foreach ($data_from->response as $remote_user) {
        if (!empty($remote_user->email) && strpos($remote_user->email, 'bestwebhosting') === FALSE ) {
          $remote_users[$remote_user->id] = array('name' => $remote_user->name, 'email' => $remote_user->email);
        }
      }
      
      if ($data_from->cursor->hasNext) {
        $next_id = explode(':', $data_from->cursor->next);
        $next_id = $next_id[0];
        $remote_users += hr_misc_disqus_getUsers($next_id);
        return $remote_users;
      }
      
    } // End of if (!$data_from->code) {
  } // End of if ($data_from) {.
  
  return $remote_users;
}


/**
 * Identify the type of the node.
 * Used in theme_pager() in template.php
 */
function hr_misc_identifyNodeType($nid) {
    
  $query = db_select('node', 'n')  
        ->fields('n', array('type'));
  $query->condition('n.nid', $nid);
  $node_type = $query->execute()->fetchField();

  return $node_type;
}

    
/**
 * Custom page not found 404.
 * Fix for a standard drupal_not_found
 */
function hr_misc_drupal_not_found() {
  
  // Disable boost caching for custom gv page not found pages.
  // First part, initialization.
  // See the second part at gv_misc_process_html(),
  // where $_boost variable  will be corrected to prevent the current page caching.
  global $hr_page_not_found;
  $hr_page_not_found = TRUE;
  
  
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  drupal_add_http_header('Status', '404 Not Found');

  watchdog('page not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Check for and return a fast 404 page if configured.
  drupal_fast_404();

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_GET['destination'])) {
    $_GET['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));
  if ($path && $path != $_GET['q']) {
    // Custom 404 handler. Set the active item in case there are tabs to
    // display, or other dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path, FALSE);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    // Standard 404 handler.
    ////drupal_set_title(t('Page not found'));
    ////$return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
    
    drupal_set_title('Page Not Found');
    
    $sitemap_body = cache_get('hr_sitemap_body');
    if (!$sitemap_body || empty($sitemap_body->data)) {
      $key = 'view-sitemap-page';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $sitemap_body = $query->execute()->fetchField(); 

      // Remove preface text from a Sitemap body.
      if(preg_match('/.*(<table.*)/s', $sitemap_body, $matches)) {
        $sitemap_body = $matches[1];
      }
            
      cache_set('hr_sitemap_body', $sitemap_body);
    }
    else {
      $sitemap_body = $sitemap_body->data;
    }
    
    $page404_body = cache_get('hr_page404');
    if (!$page404_body || empty($page404_body->data)) {
      $key = 'page-not-found';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $page404_body = $query->execute()->fetchField(); 

      cache_set('hr_page404', $page404_body);
    }
    else {
      $page404_body = $page404_body->data;
    }
    
    $return = '<div class="main-content page404"> 
      <div class="content page preface">' . $page404_body . '<div class="sitemap field-name-body">' . $sitemap_body . '</div>
      </div>
  </div>';

    
  }

  drupal_set_page_content($return);
  $page = element_info('page');
  print drupal_render_page($page);

  // Perform end-of-request tasks.
  drupal_page_footer();
}


/**
 * Return a breadcrumbs for a current page via main_menu.
 */
function hr_misc_getMenuTrail() {
  
  if(!$url_aliased = @$_SERVER['REDIRECT_URL']) {
    return FALSE;
  }
    
  //dpm('Target aliased url = ' . $url_aliased);
  
  $breadcrumbs = cache_get('hr_breadcrumbs_for_menu');
  //dpm($breadcrumbs);
  
  $breadcrumbs = !$breadcrumbs ? array() : $breadcrumbs->data;
  if (isset($breadcrumbs[$url_aliased])) {
    //dpm('breadcrumb is found in cache');
    return $breadcrumbs[$url_aliased];
  }
  
  // Search for the url in the menu and define a breadcrumb.
  $main_menu = NULL;
  
  // Check if the url is presented in the menu.
  if($main_menu_all_items = cache_get('hr_main_menu_all_items')) {
    $main_menu_all_items = $main_menu_all_items->data;
  }
  else {
    $main_menu = menu_build_tree('main-menu');
    foreach ($main_menu as $key_top => $value_top) {
      $main_menu_all_items[] = strpos($value_top['link']['href'], 'node/') !== FALSE ? $value_top['link']['href'] : '/' . $value_top['link']['href'];
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          $main_menu_all_items[] = strpos($value_below['link']['href'], 'node/') !== FALSE ? $value_below['link']['href'] : '/' . $value_below['link']['href'];
        }
      }
    }
    //dpm('Define hr_main_menu_all_items');
    cache_set('hr_main_menu_all_items', $main_menu_all_items);
  }
  
  //dpm($main_menu_all_items);
  
  $url_not_aliased = (arg(0) == 'node' ? 'node/' . arg(1) : NULL);
  if (!in_array($url_aliased, $main_menu_all_items) && !in_array($url_not_aliased, $main_menu_all_items)) {
    // Target url is not in the menu.
    //dpm('Target url is not in the menu... Exit');
    return FALSE;
  }
  
  
  //dpm('in the menu! Define breadcrumb...');
  if (!$main_menu) {
    $main_menu = menu_build_tree('main-menu');
  }
  //dpm($main_menu);
  
  
  
  $breadcrumb = '';
  
  
  
  
  //dpm($url_aliased);
  //dpm($url_not_aliased);
  
  foreach ($main_menu as $key_top => $value_top) {
    // Check top link.
    if ($value_top['link']['hidden']) {
      continue;
    }
    if ('/' . $value_top['link']['href'] == $url_aliased || $value_top['link']['href'] == $url_not_aliased) {
      //dpm('Found top url ' . $value_top['link']['link_title']);
      $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $value_top['link']['link_title'] )));
    }
    else {
      // Check nested links.
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          if ($value_below['link']['hidden']) {
            continue;
          }
          if ('/' . $value_below['link']['href'] == $url_aliased || $value_below['link']['href'] == $url_not_aliased) {
            //dpm('Found below url ' . $value_below['link']['link_title'] . ' --- ' . $key_top . ' --- ' . $key_below);
            $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l($value_top['link']['link_title'], $value_top['link']['href']), $value_below['link']['link_title'] )));
          }
        }
      }
    }
    
  }

  $breadcrumbs[$url_aliased] = $breadcrumb;
  cache_set('hr_breadcrumbs_for_menu', $breadcrumbs);
  
  return $breadcrumb;
}

/**
 * Loads an additional user_data for articles, etc.
 *
 * @param $uid
 *   A user account uid.
 * @return
 *   The user's generated object with additional data.
 */
function hr_misc_loadUserExtendedData($uid) {
  
  $cid = 'hr_userExtendedData_all';
  $cache = cache_get($cid, 'cache');
  
  if ($cache && !empty($cache->data) && !empty($cache->data[$uid]) && $cache->expire > time()) {
    $out = $cache->data[$uid];
  }
  else 
  {
    $userExtendedData_all = $cache ? $cache->data : array();
    
    $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'))
      ->fields('g', array('field_u_gplus_profile_value'));
    $query->condition('uid', $uid);
    $query->leftJoin('field_data_field_u_gplus_profile', 'g', 'g.entity_id = ' . $uid . '');
    $userExtendedData = $query->execute()->fetchObject();
    
    $userExtendedData_all[$uid] = $userExtendedData;

    cache_set($cid, $userExtendedData_all, 'cache', strtotime('+31 day'));
    $out = $userExtendedData_all[$uid];
  }
    
  return $out;
}


/**
 * Implements hook_taxonomy_term_delete().
 * Removes tag's references and its twin tag from a main tag voc references from nodes.
 */
function hr_misc_taxonomy_term_delete($current_term) {

  /*
  // Define fields names.
  $main_field_name = 'topics';
  switch ($current_term->vocabulary_machine_name) {
    
    case 'topics':
      $target_field_name = 'topics';
      break;
    
    case 'blog_tags':
      $target_field_name = 'tags_blog';
      $node_type = 'blog_post';
      break;
    case 'news_tags':
      $target_field_name = 'tags_news';
      $node_type = 'news_post';
      break;
    case 'articles_tags':
      $target_field_name = 'tags_articles';
      $node_type = 'article';
      break;
  }

  
  if ($current_term->vid != 2) { // vid for 'topics' = 2
    
    // Search for the corresponding main voc term tid.
    $all_vocs_terms = taxonomy_get_term_by_name($current_term->name);
    $found = FALSE;
    $main_term = FALSE;
    $main_vid = 2; // 2 - main voc - Topics tags.
    foreach ($all_vocs_terms as $term) {

      if ($term->vid == $main_vid) {
        // Term exists in the Topics vocabulary.
        $main_term = $term;
        $found = TRUE;
        break;
      }
    }


    if ($main_term) {
      // Get nodes list of the specific type that have this field value.
      $query = db_select('field_data_field_' . $target_field_name, 'f');
      $query->fields('f', array('entity_id'))
        ->condition('f.field_' . $target_field_name . '_tid', $current_term->tid)
        ->condition('f.entity_type', 'node');
      $nids = $query->execute()->fetchAll(PDO::FETCH_COLUMN);

      if (!empty($nids)) {
        // Delete corresponding main tag from fields.
        hr_misc_fieldDelete($main_field_name, NULL, 'field_' . $main_field_name . '_tid', $main_term->tid, $nids);

        // Delete corresponding main tag from taxonomy_index.
        db_delete('taxonomy_index')
          ->condition('tid', $main_term->tid)
          ->condition('nid', $nids, 'IN')
          ->execute();
      }
    }

  }
  // Delete current deleting term from nodes' fields.
  hr_misc_fieldDelete($target_field_name, NULL, 'field_' . $target_field_name . '_tid', $current_term->tid);
  
  // Clear all caches.
  // Commented here, because used at function hr_pages_editTagsPage_formSubmit($form, &$form_state)
  //drupal_flush_all_caches();
  */
}


/**
 * Saves or updates a field.
 */
function hr_misc_fieldDelete($field_name, $entity_id, $target_field_name = NULL, $target_field_id = NULL, $entity_ids = array()) {
  
  if (!$entity_id && $target_field_id) {
    if (empty($entity_ids)) {
      // Delete all nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
    }
    else {
      // Delete only specific nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
    }
      
  }
  else {
    db_delete('field_data_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
    db_delete('field_revision_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
  }
  
  
  field_cache_clear();
}


/**
 * Saves or updates a field.
 */
function hr_misc_fieldSave($field_name, $entity_id, $data, $entity_type = 'node', $bundle = NULL) {
  
  if(!$bundle) {
    $bundle = $entity_type;
  }
  
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('field_' . $field_name . '_value'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type);
  $result = $query->execute(); //->fetchField();
  
  if ($result->rowCount()) {
    // Need update an existing field.
    db_update('field_data_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,    
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();

    db_update('field_revision_field_' . $field_name)
      ->fields(array(
        //'entity_id' => $entity_id,
        //'delta' => 0,  
        //'revision_id'=> $entity_id,     
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();
  }
  else {
    // Need create a new field.
    db_insert('field_data_field_' . $field_name) 
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();

    db_insert('field_revision_field_' . $field_name)
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();
  }

  field_cache_clear();
}


/**
 * Prevent Enter button on Content page while inline editing fields.
 */
function hr_misc_preventEnterOnEditField() {
  $path_to_custom_js = drupal_get_path('module', 'hr_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'hr_preventEnterOnEditField.js');
  
}


/**
 * Set (if bigger then 12 hours period) and returns a last updated time stamp
 *
 */
function hr_misc_lastUpdatedStamp($min_hours = 24, $relative_path = NULL) {

  if (!$relative_path) {
    $relative_path = $_SERVER['REQUEST_URI'];
    if ($relative_path == '/home') {
      $relative_path = '/';
    }
  }
  
  $query = db_select('hr_last_updated', 'lu')
      ->fields('lu', array('timestamp'));
  $query->condition('lu.path', $relative_path);
  $last_updated = $query->execute()->fetchfield();
  
  $current_time = time();
  
  if (!$last_updated || ($current_time - $last_updated) > $min_hours * 3600 ) {
    // Update or insert new timestamp
    if ($last_updated) {
      $result = db_update('hr_last_updated')
        ->fields(array(
          'timestamp' => $current_time,
        ))
        ->condition('path', $relative_path)
        ->execute();
    }
    else {
      $result = db_insert('hr_last_updated')
        ->fields(array(
          'path' => $relative_path,
          'timestamp' => $current_time,
        ))
        ->execute();
    }
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $current_time) . '</div>';
  }
  else {
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $last_updated) . '</div>';
  }
}


/**
 * Get prefaces main section rendered.
 *
 */
function hr_misc_getPrefaceMainSection($key) {
  $node = hr_misc_getPrefaceByKey($key);
  $node->title_no_link = TRUE;
  $node_view = node_view($node, 'full');
  
  return render($node_view/*['body']*/);
}


/**
 * Get prefaces bottom section rendered.
 *
 */
function hr_misc_getPrefaceBottomSection($key, $nid = NULL) {
  if ($nid) {
    $node = node_load($nid);
  }
  else {
    $node = hr_misc_getPrefaceByKey($key);
  }
  $node_view = node_view($node, 'full');

  return render($node_view['field_preface_bottom']);
}


/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
function hr_misc_getUserRealName($uid) {
  
  $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'));
  $query->condition('rn.uid', $uid);
  $realname = $query->execute()->fetchfield();
  
  return $realname;
}


/**
 * Returns initial (landing) node for a given final request a quote page.
 */
function hr_misc_getInitialQuotePageNode($finalQuotePage_title) {
  
  $title = trim(str_replace(' Final', '', $finalQuotePage_title));
  $query = db_select('node', 'n')
      ->fields('n', array('nid'));
  $query->condition('n.title', $title);
  $query->condition('n.type', 'quote');
  $nid = $query->execute()->fetchfield();
  
  return node_load($nid);
}


/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
/*
function hr_misc_renderMetatags_newOrder(&$metatags) {
  
  echo render($metatags['description']);
  echo render($metatags['keywords']);
  // The rest...
  echo render($metatags);
}
*/


/**
 * Process variables for search-result.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $result
 * - $module
 *
 * @see search-result.tpl.php
 */
function hr_misc_preprocess_searhr_result(&$variables) {
  
  // Original code.
  /*
  global $language;
  
  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = check_plain($result['title']);
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    //$info['date'] = format_date($result['date'], 'short');
    // a4s changes
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    //$info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }
  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'searhr_result__' . $variables['module'];
  */
  
  
  // a4s changes
  $result = $variables['result'];
  if (!empty($result['date'])) {
    $info = array();
    //$info['date'] = format_date($result['date'], 'short');
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    $info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
    
    if (isset($result['extra']) && is_array($result['extra'])) {
      $info = array_merge($info, $result['extra']);
    }
    $variables['info_split'] = $info;
    $variables['info'] = implode(' - ', $info);
  }
}



/**
 * Implements hook_ranking() for Search ranking.
 */
function hr_misc_ranking() {
 // Add relevance based on creation or changed date.
  if ($node_cron_last = variable_get('node_cron_last', 0)) {
    $ranking['recent_created'] = array(
      'title' => t('Recently posted (created)'),
      // Exponential decay with half-life of 6 months, starting at last indexed node
      'score' => 'POW(2.0, (n.created - :node_cron_last) * 6.43e-8)',
      'arguments' => array(':node_cron_last' => $node_cron_last),
    );
  }
  return $ranking;
}


/**
 * Push field tags (topics) to metatags in the Head.
 */
function hr_misc_pushTagsToMetatags($name, $value, $weight = 'NA') {
  switch ($name) {
    case 'keywords':
    case 'news_keywords':
      $t = '';
      $tags = element_children($value);
      foreach ($tags as $tag) {
        $t .= $t ? ', ' . $value[$tag]['#title'] : $value[$tag]['#title'];
      }
      if ($t) {
        hr_misc_addMetatag($name, $t, NULL, $weight);
      }
      break;
  }
}


/**
 * Allow modules to define namespaces for RDF mappings.
 *
 * Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,
 * if a module implements hook_rdf_mapping() and uses a prefix that is not
 * defined in rdf_rdf_namespaces(), this hook should be used to define the new
 * namespace prefix.
 *
 * @return
 *   An associative array of namespaces where the key is the namespace prefix
 *   and the value is the namespace URI.
 *
 * @ingroup rdf
 */
// a4s Seems it didn't work out...
function hr_misc_rdf_namespaces() {
  return array(
    'xmlns:addthis'  => 'http://www.addthis.com/help/api-spec',
    'xmlns:g'  => 'http://base.google.com/ns/1.0',
  );
}


/**
 * Implements hook_TYPE_alter().
 * 
 * Specifically hook_html_head_alter().
 */
function hr_misc_html_head_alter(&$object) {
  //dpm($object);
  if (isset($object['rdf_node_comment_count'])) {
    unset($object['rdf_node_comment_count']['#attributes']['datatype']);
  }
}


/**
 * Implements hook_views_api().
 *
 * @return array
 *   Views api definition.
 */
function hr_misc_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'hr_misc') . '/inc',
  );
} 


/**
 * Form with a fieldset of Add content section for Admin Content page (by Views).
 */
function hr_misc_AddContentSection_form() {
  
  global $user;
  
  $types = node_type_get_types();
  
  // Hide some content tupes if not a root.
  if ($user->uid != 1) {
    unset($types['admin_page'], $types['preface'], $types['quote'], $types['webform']);
  }
  
  $options = array('' => '- Select a content type -');
  foreach ($types as $type => $value) {
    $options[str_replace('_', '-', $type)] = $value->name;
  }
  
  $form['add_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new content'),
    '#collapsible' => TRUE,
  );
  $form['add_content']['select_type'] = array(
    '#type' => 'select',
    //'#title' => 'Select content type',
    '#options' => $options,
    '#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
  );
  
  return $form;
}


/**
 * Get a picture from a remote server.
 */
function hr_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)
{
	
    $curl = curl_init();

    // Setup headers - I used the same headers from Firefox version 2.0.0.6
    // below was split up because php.net said the line was too long. :/
    $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
    $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
    $header[] = "Cache-Control: max-age=0";
    $header[] = "Connection: keep-alive";
    $header[] = "Keep-Alive: 300";
    $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
    $header[] = "Accept-Language: en-us,en;q=0.5";
    $header[] = "Pragma: ";
    // browsers keep this blank.

    $referers = array("google.com", "yahoo.com", "msn.com", "ask.com", "live.com");
    $choice = array_rand($referers);
  	//if ($referer == "") 
    $referer = "http://www." . $referers[$choice] . "/";

    //$browsers = array("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1) Gecko/20060918 Firefox/2.0", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3", "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)");
    //$choice2 = array_rand($browsers);
    //$lines = file('/home/xxx/public_html/sites/all/modules/xxx/ua.txt');
    //$browser = trim($lines[$agentid]);

    curl_setopt($curl, CURLOPT_URL, $url);
    //curl_setopt($curl, CURLOPT_USERAGENT, $browser);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    curl_setopt($curl, CURLOPT_REFERER, $referer);
    //curl_setopt($curl, CURLOPT_AUTOREFERER, true);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_TIMEOUT, 300);
    curl_setopt($curl, CURLOPT_MAXREDIRS, 7);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

    $data = curl_exec($curl);

    if ($data === false) {
      $data = curl_error($curl);
      // close the connection
      curl_close($curl);
      return $data;
    }

    // close the connection
    curl_close($curl);

    // write content to a file
    file_put_contents($file_local_abs, $data);

    return null; //OK
}


/**
 * Return trimmed teaser with right size (cleared from images) and with separated a styled image, cutted off from the body.
 */
function hr_misc_getArticleTeaserData($target, $body_full_markup, $nid, $characters_num = NULL, $only_teaser = FALSE, $thumbnail_fid = NULL) {
 
  $main_image_html = NULL;
  $side_block_image_html = NULL;
  $main_image = NULL;
  $matches = NULL;
  $found_image = NULL;
  
  if ($thumbnail_fid) {
    // if is used a separate thumbnail image field.
    $query = db_select('file_managed', 'f')
      ->fields('f', array('uri'));
    $query->condition('fid', $thumbnail_fid);
    $main_image['uri'] = $query->execute()->fetchField();
    $main_image['src'] = hr_misc_getPathFromStreamUri($main_image['uri']);

    $found_image = TRUE;
  }
  elseif (preg_match('/<img[^>]+>/i', $body_full_markup, $matches)) {
    $found_image = TRUE;
    preg_match_all('/(alt|title|src)="([^"]*)"/i',$matches[0], $matches);
    foreach ($matches[1] as $index => $key) {
      $main_image[$key] = $matches[2][$index];
    }
    $body_full_markup = preg_replace('/<img[^>]+>/i', '', $body_full_markup);
    
    // Set No image for externally linked image.
    if ( (strpos($main_image['src'], 'http') !== FALSE && !strpos($main_image['src'], 'hostingreview.org')) || (!file_exists(ltrim(str_replace('http://hostingreview.org/', '', $main_image['src']), '/') ) )  ) {
      $found_image = FALSE;
      //dpm($main_image);
      //dpm('$found_image = FALSE');
    }
  }
  elseif (preg_match('/\[video:.*v=(.*)\]/i', $body_full_markup, $matches)) {
    // [video: https://www.youtube.com/watch?v=H1vdPJzzzAY]
    $video_id = $matches[1];
    if($main_image['src'] = hr_misc_getYoutubeVideoThumb($video_id)) {
      $found_image = TRUE;
    }
    $body_full_markup = preg_replace('|\[video:.*(http.*)\]|', '<a href="$1"> [Watch a video] </a>', $body_full_markup);
  }
  
  //dpm($main_image);
  
  
  if ($found_image) {
    
    // Replace the old WP path for images with the new drupal img path.
    if (strpos($main_image['src'], 'http') !== FALSE) {
      $main_image['src'] = str_replace('http://hostingreview.org/wp-content', 'f/img/wp-content', $main_image['src']);
    }
    
    $main_image['src'] = str_replace('%20', ' ', $main_image['src']);
    if ($thumbnail_fid) {
      // if is used a separate thumbnail image field.
      $stream_path = $main_image['uri'];
    }
    else {
      $stream_path = hr_misc_getStreamUriFromRelativePath($main_image['src']);
      $main_image['uri'] = $stream_path;
    }
    
    $image_size = getimagesize(ltrim($main_image['src'], '/'));

    if (empty($image_size)) {
      drupal_set_message('HR: Some problems with the file ' .$main_image['src'] . '. It doesn\'t exist or is empty.', 'warning');
    }
    else {
          // Scale and cut.
          /*
          if ($image_size[0] / $image_size[1] > 1.5) {
            $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_h'));
          }
          else {
            $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_v'));
          }
          */
          // Scale only.
          if ($thumbnail_fid) {
            $style_name = 'article_thumbnail_field';
          }
          elseif ($image_size[0] / $image_size[1] > 1) {
            $style_name = 'article_thumbnail_h';
            ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
            //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
          }
          else {
            $style_name = 'article_thumbnail_v';
            ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
            //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
          }


          $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
          $main_image_html = '<div class="thumb' . ($thumbnail_fid ? ' field' : '') . '">' . $main_image_html . '</div>';

          $side_block_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_side_block'));
          $side_block_image_html = '<div class="thumb' . ($thumbnail_fid ? ' field' : '') . '">' . $side_block_image_html . '</div>';


          // Image for sharing.
          if ($image_size[0] / $image_size[1] > 1) {
            // Too wide. will not be cutted.
            $style_name_share = 'share_wide';
            //$main_image['src_themed'] = image_style_url('share_wide', $stream_path);
          }
          elseif ($image_size[1] / $image_size[0] < 1) {
            // Too tall. will not be cutted.
            $style_name_share = 'share_tall';
            //$main_image['src_themed'] = image_style_url('share_tall', $stream_path);
          }
          else {
            //Normal image, will not be cutted.
            $style_name_share = 'share';
            //$main_image['src_themed'] = image_style_url('share', $stream_path);
          }
          $main_image['src_themed'] = image_style_url($style_name_share, $stream_path);

          //$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail'));

          // Clear existing image_cached files.
          $default_file_path = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/f');
          $styles_to_delete = array($style_name, $style_name_share, 'block_thumb');
          foreach ($styles_to_delete as $style_to_delete) {
            $to_delete = str_replace($default_file_path, $default_file_path . '/styles/' . $style_to_delete . '/public' , $main_image['src']);
            if (file_exists($to_delete)) {
              unlink($to_delete);
            } 
          }

    }
      
    
  } // End of if ($found_image) {

  $teaser = strip_tags($body_full_markup);
  
  
  if (!$characters_num) {
    if ($main_image_html) {
      $characters_num = 450;
    }
    else {
      $characters_num = 450;
    }
  }
  
  $teaser_block = trim(drupal_substr($teaser, 0, 200));// . '...';
  $last_pos = strrpos($teaser_block, ' ');
  $teaser_block = '<div class="teaser-content">' . substr_replace ($teaser_block, '...', $last_pos) . '</div>';
  
  $teaser_home = trim(drupal_substr($teaser, 0, 200));// . '...';
  $last_pos = strrpos($teaser_home, ' ');
  $teaser_home = substr_replace ($teaser_home, '...', $last_pos);
  
  if ($found_image) {
    $teaser_side_block_chars = 105;//70;
  }
  else {
    $teaser_side_block_chars = 105;
  }
  $teaser_side_block = trim(drupal_substr($teaser, 0, $teaser_side_block_chars));
  $last_pos = strrpos($teaser_side_block, ' ');
  $teaser_side_block = '<div class="teaser-content">' . substr_replace ($teaser_side_block, '...' . l('Read more', 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos) . '</div>';
  
  // $teaser = text_summary($body_full_markup, 'full_html', $characters_num);
  $teaser = trim(drupal_substr($teaser, 0, $characters_num));
  
  
  // Replace the last word with ...
  // preg_match('/^.*\s(.*)$/i', trim(strip_tags($teaser)), $matches);
  // $last_pos = strrpos($teaser, $matches[1]);
  $last_pos = strrpos($teaser, ' ');
  
  // $teaser = substr_replace ($teaser, '...' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))) , $last_pos, strlen($matches[1]));
  ////$teaser = substr_replace ($teaser, '...' . l('Read the rest of this entry Р В Р’В Р Р†Р вЂљРІвЂћСћР В РІР‚в„ўР вЂ™Р’В»', 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos);
  
  //$teaser = substr_replace ($teaser, '... ' . l('Read more Р В Р’В Р Р†Р вЂљРІвЂћСћР В РІР‚в„ўР вЂ™Р’В»', 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos);
  $teaser = '<div class="teaser-content">' . substr_replace ($teaser, '... ' . l('Read more', 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos) . '</div>';
  
  
  if ($only_teaser) {
    return $main_image_html . $teaser;
  }
  else {
    return array('teaser' => $teaser, 'teaser_side_block' => $teaser_side_block, 'teaser_block' => $teaser_block, 'teaser_home' => $main_image_html . $teaser_home, 'main_image' => $main_image, 'teaser_main_image' => $main_image_html, 'side_block_main_image' => $side_block_image_html);
  }
  
}



/**
 * Implements a new view_mode.
 */
function hr_misc_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['side_block_teaser'] = array(
    'label' => t('Side block teaser'),
    'custom settings' => TRUE,
  );
  
  $entity_info['node']['view modes']['teaser_on_serviceTypePage'] = array(
    'label' => t('Teaser on Servide Type Page, e.g. /shared'),
    'custom settings' => TRUE,
  );
}


/**
 * Rewrite links like /sites/default/files/pdfs/ to alias /pdfs/ (forward) and vise versa and others.
 */
function hr_misc_rewriteLinks($type, $data, $direction = 'forward') {
  switch ($type) {
    case 'pdfs':
      if ($direction == 'forward') {
        // Converts from /sites/default/files/pdfs/ to /pdfs/
        // the real path will be accessible with .htaccess mod_rewrite settings in the root of the site.

        // $body = $form_state['values']['body'];
        $body = $data['values']['body'];
        $count1 = $count2 = 0;
        if ($body['und'][0]['value']) {
          $body['und'][0]['value'] = preg_replace('|"/f/pdfs|', '"/pdfs', $body['und'][0]['value'], -1, $count1);
        }
        if ($body['und'][0]['summary']) {
          $body['und'][0]['summary'] = preg_replace('|/f/pdfs|', '"/pdfs', $body['und'][0]['summary'], -1, $count2);
        }
        if ($count1 + $count2 > 0) {
          return $body;
        }
      }
      else {
        // Converts from /pdfs/ to /sites/default/files/pdfs/

        // $body = $form['body']
        $body = $data['body'];
        if ($body['und'][0]['#default_value']) {
          $body['und'][0]['#default_value'] = preg_replace('|"/pdfs|', '"/f/pdfs', $body['und'][0]['#default_value'], -1);
        }
        if ($body['und'][0]['summary']['#default_value']) {
          $body['und'][0]['summary']['#default_value'] = preg_replace('|"/pdfs|', '"/f/pdfs', $body['und'][0]['summary']['#default_value'], -1);
        }
        return $body;
      }
      break;
  }
  return NULL;
}


/**
 * Convert path from Drupal stream uri.
 */
function hr_misc_getPathFromStreamUri($uri) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/f');
  
  return $default_file_path . str_replace($file_default_scheme . ':/', '', $uri);
}


/**
 * Convert a relative or absolute path to Drupal stream uri.
 */
function hr_misc_getStreamUriFromRelativePath($path) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/f');

  $stream_path = str_replace('http://hostingreview.org', '', $path);
  $stream_path = ltrim($stream_path, '/');
  return $file_default_scheme . '://' . str_replace($default_file_path . '/', '', $stream_path);
}


/**
 * Adds js to a page for making all images zoomable.
 */
function hr_misc_addZoomableImagesJs() {
  //1, 3, 4, 
  drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
  drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

  $path_to_module = drupal_get_path('module', 'hr_misc');
  drupal_add_js($path_to_module . '/js/hr_makeImagesZoomable.js');
}


/**
 * Helper function to add metatag to a current page.
 */
function hr_misc_addMetatag($name, $content, $href = NULL, $weight = 'NA') {
  if ($content) {
    if ($name == 'title') {
      drupal_set_title($content);
    }
    else {
      $meta = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => $name,
            'content' => $content,
        )
      );
      if ($weight != 'NA') {
        $meta['#weight'] = $weight;
      }
      drupal_add_html_head($meta, $name);
    }
  } // End of if ($content) {
  elseif($href) {
    $meta = array(
      '#tag' => 'link',
      '#attributes' => array(
          'rel' => $name,
          'href' => $href,
      )
    );
    if ($weight != 'NA') {
      $meta['#weight'] = $weight;
    }
    drupal_add_html_head($meta, $name);
  } // End of elseif($href) {
}


/**
 * Get the title metatag for the front page from the Metatag module's settings.
 */
function hr_misc_metatag_getFrontTitle() {
  $metatags = metatag_metatags_view('global:frontpage', array());
  return $metatags['title']['#attached']['metatag_set_preprocess_variable'][0][2];
}


/**
 * Helper function to add sharing data (metatags and links) to a current page.
 */
function hr_misc_addSocialShareData_toPage($node) {
  
  global $schema_org_type;
  $image = NULL;
  $og_type = NULL;
  $title = NULL;
  $description = NULL;
  $tags = array();
  
  //$title = $node->title;
  if (@$node->field_preface_key['und'][0]['value'] == 'front') {
    
    $title = hr_misc_metatag_getFrontTitle();
    
    $tags = array(
      
      // Add all rss feeds to the home page (exceot the main rss, which will be added to all pages).
      'articles_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'Articles from hostingreview.org',
            'href' => 'http://hostingreview.org/rss.xml',
        ),
      ),
        /*
      'blog_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'hostingreview.org Blog',
            'href' => 'http://hostingreview.org/blog/rss.xml',
        ),
      ),
        */
        
    );
    
  }
  if (!$title) {
    if (isset($node->metatags['title']['value']) && $node->metatags['title']['value']) {
      $title = $node->metatags['title']['value'];
    }
    else {
      $title = $node->title;
    }
  }
  
  
  
  switch ($node->type) {
    case 'blog_post':
    case 'news_post':
    case 'article':
      if (isset($node->field_main_image['und'][0]['value']) && $node->field_main_image['und'][0]['value']) {
        $image = unserialize($node->field_main_image['und'][0]['value']);
        if (isset($image['src_themed']) && $image['src_themed']) {
          $image = $image['src_themed'];
        }
        elseif (isset($image['src']) && $image['src']) {
          $image = $image['src'];
        }
        else {
          $image = NULL;
        }
      }
    
      /*
      if (!@$node->metatags['description']['value']) {
        $description = $title . '...';
      }
      */
      
      $og_type = 'article';
      $schema_org_type = 'Article';
      
      break;
    
      
      
    case 'provider':
      
      $p_data = unserialize($node->field_p_data['und'][0]['value']);
      if (isset($p_data['share_src_themed']) && $p_data['share_src_themed']) {
        $image = $p_data['share_src_themed'];
      }
      elseif(isset($node->field_p_logo['und'][0]['uri']) && $node->field_p_logo['und'][0]['uri']) {
        $image = hr_misc_getPathFromStreamUri($node->field_p_logo['und'][0]['uri']);
      }
      
      $og_type = 'company';
      $schema_org_type = 'LocalBusiness';
      break;
      
      
      /*
    case 'review':
      global $review_share_src_themed;
      if ($review_share_src_themed) {
        $image = $review_share_src_themed;
      }
      $og_type = 'company';
      $schema_org_type = 'Review';
      // Refresh a title a bit.
      $title = $node->field_r_provider_name['und'][0]['value'] . ' Review - ' . $node->title;
      break;
      */
      
    
  }
  
  //$title = str_replace('[site:name]', 'hostingreview.org', $title);
  $title = token_replace($title);
  
  
  if (!$image){
    // Show default image - the logo.
    $image = '/sites/all/themes/hr/css/images/hr-logo-t.png';
  }

  if (!strpos($image, 'hostingreview.org')) {
    $image = 'http://hostingreview.org/' . ltrim($image, '/');
  }

  
  $tags += array(
       /*
      'title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'title',
              'content' => "Video '" . $node->title . "' by " . $publisher_title,
          ),
      ),
      'DC.title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'DC.title',
              'content' => $node->title,
          ),
      ),
      'description' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => (isset($node->body['und'][0]['summary']) AND $node->body['und'][0]['summary'])?$node->body['und'][0]['summary']:drupal_substr(strip_tags($node->body['und'][0]['value']), 0, 200) . '...',
          ),
      ),
      'author' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'author',
              'content' => $publisher_title,
          ),
      ),



      'medium' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'medium',
              'content' => 'video',
          ),
      ),

      'video_type' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_type',
              'content' => 'application/x-shockwave-flash',
          ),
      ),

      'video_height' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '300',
          ),
      ),

      'video_width' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '500',
          ),
      ),


      'video_src' => array(
          '#tag' => 'link', // The #tag is the html tag - <link />
          '#attributes' => array( 
              'href' => 'http://ripplin.com/sites/all/libraries/flowplayer/flowplayer-3.2.8.swf?config=' . urlencode('http://ripplin.com/video-src?v=' . $node->nid),
              'rel' => 'video_src',
          ),
      ),
      */
  
      /*
    'fb:admins' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'fb:admins',
          'content' => 'http://www.facebook.com/voipnowservice',
      ),
    ),
      */
      
    // Title for Facebook.
    'og:title' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:title',
          'content' => $title,
      ),
    ),
      
    // Title for G+.
    'name' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'name',
          'content' => $title,
      ),
    ),
      
    'image_src' => array(
      '#tag' => 'link', // The #tag is the html tag - <link />
      '#attributes' => array( 
          'href' => $image,
          'rel' => 'image_src',
          //'type' => 'text/css',
      ),
    ),
  
    // For Facebook.
    'og:image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:image',
          'content' => $image,
      ),
    ),
      
    // For G+.  
    'image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'image',
          'content' => $image,
      ),
    ),
      
      
      
    // Add main rss feed to every page.
    'main_rss' => array(
      '#tag' => 'link', 
      '#attributes' => array( 
          'rel' => 'alternate',
          'type' => 'application/rss+xml',
          'title' => 'Latest Articles from hostingreview.org',
          'href' => 'http://hostingreview.org/rss.xml',
      ),
    ),
      
  );

  /*  
  if ($description) {
    
    $tags['description'] = array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => $description,
          ),
      );
  }
  */
  
  if ($og_type) {
   
    $tags['og:type'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:type',
            'content' => $og_type,
        ),
    );
  }
  
  
        
  foreach ($tags as $key => $val)
      drupal_add_html_head($val, $key);
        
}


/**
 * Get img src for Share from Uri.
 */
function hr_misc_getShareSrcThemed_fromUri($uri) {
  
  // Define share pic.
  $image_size = getimagesize(ltrim(hr_misc_getPathFromStreamUri($uri), '/'));
  // Image for sharing.
  if ($image_size[0] / $image_size[1] > 1) {
    // Too wide. will not be cutted.
    $out = image_style_url('share_wide', $uri);
  }
  elseif ($image_size[1] / $image_size[0] < 1) {
    // Too tall. will not be cutted.
    $out = image_style_url('share_tall', $uri);
  }
  else {
    //Normal image, will not be cutted.
    $out = image_style_url('share', $uri);
  }
  
  return $out;
}


/**
 * Returns votes ids for a specific criteria.
 */
function hr_misc_getVotesIDs($criteria) {
    $query = db_select('votingapi_vote', 'v')
      ->fields('v', array('vote_id', 'tag', 'value'));
    foreach ($criteria as $field => $value) {
      $query->condition($field, $value);
    }
    $results = $query->execute()->fetchAllAssoc('vote_id');
    $votes = array();
    foreach ($results as $result) {
      //$votes[] = array('vote_id' => $result->vote_id);
      $votes[] = (array) $result;
    }
    return $votes;
}


/**
 * Helper function to for administer menu.
 */
function hr_misc_gotoReviewsToApprove() {
  drupal_goto('admin/content/approve-reviews');
}


/**
 * Approve content by type and nid.
 */
function hr_misc_approveContent($type, $id) {

  switch ($type) {
    
    case 'review':
      
      global $user;
      if (!in_array('administrator', $user->roles)) {
        drupal_access_denied();
        return;
      }
      /*
      if (!$id || !$node = node_load($id)) {
        return t('Wrong Review Id');
      }
      $node->field_r_notapproved['und'][0]['value'] = 0;
      $node->status = 1;
      node_save($node);
      drupal_set_message('The review ' . l($node->title, 'node/' . $node->nid) . ' is now approved and published.');
      drupal_goto();
      */
      break;
    
    case 'email':
      
      $approve = explode('=', $id);
      if(count($approve) != 2 ) {
        drupal_access_denied();
        return;
      }
      $code = $approve[0];
      $email = $approve[1];
      
      $query = db_select('field_data_field_r_email', 're')
        ->fields('re', array('entity_id'));
      $query->condition('field_r_email_value', $email);
      //$review_nid = $query->execute()->fetchField();
      $results = $query->execute();
      
      //$found_nid = FALSE;
      $error = FALSE;
      foreach ($results as $result) {
        $found_nid = TRUE;
        $review_nid = $result->entity_id;
        
        $query = db_select('node', 'n')
          ->fields('n', array('uid'))
          ->fields('ac', array('field_r_approvecode_value'));
        $query->condition('nid', $review_nid);
        $query->leftJoin('field_data_field_r_approvecode', 'ac', 'ac.entity_id = n.nid');
        $review = $query->execute()->fetchObject();
        
        if ($review->uid) {
            // Wrong request because it's a registered user's email.
            $error = t('Wrong request.');
        }
        elseif (!$review->field_r_approvecode_value) {
          $error = t('This email is already approved.');
        }
        elseif ($review->field_r_approvecode_value != $code) {
          $error = t('Wrong verification code!');
        }
        else {
          $error = FALSE;
          break;
        }
      }
      
      if ($error) {
        // Error.
        return $error;
      }
      
      // We are ready to approve the email now.
      
      //$review = node_load($review_nid);
      //$review->field_r_approvecode['und'][0]['value'] = '';
      //node_save($review);
      
      hr_misc_fieldSave('r_approvecode', $review_nid, '');
      
      return 'Thank you! Your email has been successfully verified! After approving by our administrators, your review will be published on our site.';
  }
  
  drupal_access_denied();
}


/**
 * Implements hook_url_inbound_alter().
 */
function hr_misc_url_inbound_alter(&$path, $original_path, $path_language) {
//Create the path /contact-us from /contact
//if (preg_match('|^contact-us$|', $path, $matches)) {
//  $path = 'contact';
//}
//else
  if ($path == 'provider-submit-user-review') {
    $path = 'node/add/review';
  }

//  elseif (preg_match('|^pdfs\/(.*)|', $path, $matches)) {
//    //$path = 'pdfs/voipe911-advisory.pdf';
//    $path = 'sites/default/files/pdfs/' . $matches[1];
//    //$path = '';
//  }
}


/**
 * Implements hook_url_outbound_alter().
 */
function hr_misc_url_outbound_alter(&$path, &$options, $original_path) {
  // Create the path /contact-us from /contact
//  if (preg_match('|^contact$|', $path, $matches)) {
//    $path = 'contact-us';
//  }
//  else

  
  //if (!empty($options['attributes']['rel'])) 
//  global $user;
//  if ($path == 'http://click.websitegear.com/track/1883449')
//  {
//    //$options['attributes']['rel'] = 'nofollow';
//    //dpm($path);
//    //dpm($options);
//    //unset($options['attributes']['rel']);
//    $options['attributes']['rel'] = 'yyy';
//    //$options['attributes']['target'] = '_parent';
//    $options['fragment'] = 'zzz';
//    //dpm($options);
//  }
  
  if ($path == 'node/add/review') {
    $path = 'provider-submit-user-review';
  }
  elseif (preg_match('|^f\/pdfs\/(.*)|', $path, $matches)) {
    //$path = 'sites/default/files/pdfs/voipe911-advisory.pdf';
    $path = 'pdfs/' . $matches[1];
  }
}


/**
 * Loads jquery plugin Colorbox to open videos in popup windows
 */
function hr_misc_loadColorboxForVideoLinks($type = 'YouTube Direct Link') {
  switch ($type) {
    case 'YouTube Direct Link':
        // for links with a class "yt-direct" like <a class="yt-direct" href="http://www.youtube.com/embed/9fWAFw4iSrg?rel=0&amp;wmode=transparent" title="Fonality HUD - Full Demo">Fonality HUD - Full Demo</a>
        drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox-min.js');
        drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css');
        $path_to_custom_js = drupal_get_path('module', 'hr_misc') . '/js/';
        drupal_add_js($path_to_custom_js . 'hr_colorbox_p_video.js');
        break;
  }
}





/**
 * Implements on the fly capturing of a users' data before they have submit requests.
 * 
 * Returns nothing.
 */
function hr_misc_makeRequestCapture_ajax() {

  /*
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  
  if (@$post['op'] == 'exit') {
    
    if (isset($_SESSION['ucaptured_timestamp'])) {
      
      // If a row in the DB has been created already
      $query = db_select('hr_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $ucaptured = $query->execute()->fetchField();
      $ucaptured = unserialize($ucaptured);  
      
      $ucaptured = hr_misc_setUcapturedVariable($post, $ucaptured);

//      $ucaptured['Email'] = (isset($post['email']) && $post['email']) ? $post['email'] : $ucaptured['Email'];
//      $ucaptured['First Name'] = (isset($post['fname']) && $post['fname']) ? $post['fname'] : $ucaptured['First Name'];
//      $ucaptured['Last Name'] = (isset($post['lname']) && $post['lname']) ? $post['lname'] : $ucaptured['Last Name'];

      if ($ucaptured['Email']) {
      
            // Send alert email.
            $ucaptured_data = hr_misc_setUcapturedVariable(NULL, $ucaptured, TRUE);
            $ucaptured_data += array(
              'User IP' => isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
              'Start Submission Time' => date('Y-m-d, H:i:s', $_SESSION['ucaptured_timestamp']),
            );
            
            if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://hostingreview.org')) {
              $ucaptured_data['Referrer'] = $_SERVER['HTTP_REFERER'];
            }
            
            $params['ucaptured_data'] = $ucaptured_data;
            global $language;
            
            // Normal send if not a test from a4s
            drupal_mail('hr_misc', 'request_quote', 'leads@hostingreview.org', $language->language, $params);
            // Test letter to the root
            drupal_mail('hr_misc', 'request_quote_ucaptured_data', 'all4senses@gmail.com', $language->language, $params);
            
            // Update DB.
            $result = db_update('hr_quote_requests')
              ->fields(array(
                'data' => serialize($ucaptured),
                'status' => 1, // Unsubmitted, sent.
                'checked' => 1, // Reviewed, because is sent.
                'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
              ))
              ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
              ->execute();

          } // End of if ($ucaptured['email']) {
          else {

            // Remove the row from DB (if it is there) because it's useless without an email.

//            if (isset($_SESSION['ucaptured_timestamp'])) {
//              $result = db_delete('hr_quote_requests')
//                ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
//                ->execute();
//            }

          } // End of Else of if ($ucaptured['email']) {

          unset($_SESSION['ucaptured_timestamp']);
    
    } // End of if (isset($_SESSION['ucaptured_timestamp'])) {

    
    
    
  } // End of if (@$post['op'] == 'exit') {
  else {
    
    // Op = set
    
    if (isset($_SESSION['ucaptured_timestamp'])) {
      
      // A row has been already created.
      
      $query = db_select('hr_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $ucaptured = $query->execute()->fetchField();
      
      if ($ucaptured) {
        $ucaptured = unserialize($ucaptured);
        
        $ucaptured = hr_misc_setUcapturedVariable($post, $ucaptured);
        $result = db_update('hr_quote_requests')
          ->fields(array(
            'data' => serialize($ucaptured),
            'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
          ))
          ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
          ->execute();

      } // End of if ($ucaptured) {
      else {
        $ucaptured = hr_misc_setUcapturedVariable($post);
        $result = db_insert('hr_quote_requests')
          ->fields(array(
            'timestamp' => $_SESSION['ucaptured_timestamp'],
            'status' => 0, // Unsubmitted, not yet sent.
            'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
            'data' => serialize($ucaptured),
            'checked' => 0, // Not reviewed by a user or not sent
            'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
          ))
          ->execute();
      } // End of Else of if ($ucaptured) {
      
    } // End of if (isset($_SESSION['ucaptured_timestamp'])) {
    else {
      
      // A row is not yet created in the DB.
      
      $_SESSION['ucaptured_timestamp'] = time();
      
      // Check if such timestamp alreade exists.
      $query = db_select('hr_quote_requests', 'qr')
        ->fields('qr', array('data'));
      $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
      $tmp = $query->execute()->fetchField();
       
      if ($tmp) {
        $_SESSION['ucaptured_timestamp'] += 1;
        
          // AGAIN Just in case... Check if such timestamp alreade exists.
        $query = db_select('hr_quote_requests', 'qr')
          ->fields('qr', array('data'));
        $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
        $tmp = $query->execute()->fetchField();

        if ($tmp) {
          $_SESSION['ucaptured_timestamp'] += 1;
        }
        
      }
      
//      if ($tmp) {
//        do {
//          // It exists, so we'll just increment timestamp, hopely a new one doesn't exist.
//          $_SESSION['ucaptured_timestamp'] += 1;
//          $query = db_select('hr_quote_requests', 'qr')
//            ->fields('qr', array('data'));
//          $query->condition('qr.timestamp', $_SESSION['ucaptured_timestamp']);
//          $tmp = $query->execute()->fetchField();
//        } while ($tmp);
//      }
      
      $ucaptured = hr_misc_setUcapturedVariable($post);
      $result = db_insert('hr_quote_requests')
        ->fields(array(
          'timestamp' => $_SESSION['ucaptured_timestamp'],
          'status' => 0, // Unsubmitted, not yet sent.
          'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
          'data' => serialize($ucaptured),
          'checked' => 0, // Not reviewed by a user or not sent
          'email_presented' => $ucaptured['Email'] ? $ucaptured['Email'] : NULL,
        ))
        ->execute();
      
    } // End of Else of if (isset($_SESSION['ucaptured_timestamp'])) {
    
  } // End of Else of if (@$post['op'] == 'exit' && $ucaptured && @$ucaptured['email']) {
  
  drupal_json_output(array('status' => $status));
 */ 
  
}


/**
 * Helper function for loading a data in the ucaptured variable while handling the capturing user data on the request a quote page.
 * 
 */
function hr_misc_setUcapturedVariable($post, $ucaptured = NULL, $combine_phone = FALSE) {
  
  if ($combine_phone) {
    if (isset($ucaptured['Phone 1']) && isset($ucaptured['Phone 2']) && isset($ucaptured['Phone 3'])) {
      $ucaptured['Phone #'] = $ucaptured['Phone 1'] . '-' . $ucaptured['Phone 2'] . '-' . $ucaptured['Phone 3'];
      unset($ucaptured['Phone 1'], $ucaptured['Phone 2'], $ucaptured['Phone 3']);
    }
    return $ucaptured;
  }
  
  $fields = array(
      'Email' => 'email', 
      'First Name' => 'firstname', 
      'Last Name' => 'lastname',
      //'Name' => 'name',
      'Phone #' => 'phone',
      //'Phone 1' => 'phone_1',
      //'Phone 2' => 'phone_2',
      //'Phone 3' => 'phone_3',
      'Website' => 'website', 
      'Company' => 'company',
      //'Monthly budget' => 'budget',
      
      'Phones needed' => 'phones_amt',
      'Quote type' => 'q_type',
      'Buying Time Frame' => 'buying_time',

      //'Quote for' => 'q_for',
      
      'Source' => 'source',
      'Version' => 'version',
      'Sumbission page' => 'url',
  );
  
  if ($ucaptured) {
    foreach ($fields as $key1 => $key2) {
      //$ucaptured['Email'] = (isset($post['email']) && $post['email']) ? $post['email'] : $ucaptured['Email'];
      $ucaptured[$key1] = (isset($post[$key2]) && $post[$key2]) ? $post[$key2] : (isset($ucaptured[$key1]) ? $ucaptured[$key1] : '');
    }
  }
  else {
    foreach ($fields as $key1 => $key2) {
      //$ucaptured['Email'] = isset($post['email']) ? $post['email'] : '';
      $ucaptured[$key1] = isset($post[$key2]) ? $post[$key2] : '';
    }
    
    if(isset($_SERVER['HTTP_USER_AGENT'])) {
      $ucaptured['Browser'] = $_SERVER['HTTP_USER_AGENT'];
    }
    if (isset($post['referrer']) && $post['referrer']) {
      $ucaptured['Referrer'] = $post['referrer'];
    }
    /*
    if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://hostingreview.org')) {
      $ucaptured['Referrer'] = $_SERVER['HTTP_REFERER'];
    }
    */
  }
  

  
  return $ucaptured;
}



/**
 * Implements requests from users.
 * 
 * Returns json result data with OK or error.
 */
function hr_misc_checkCtCaptcha_ajax() {
  $status = TRUE;
  $output = '';
  
  //$post = $_POST;
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }

  if ($post['op'] == 'get') {
    $cap = $_SESSION['securimage_code_value']['default'];
  }
  else {
    $cap = NULL;
  }
  
  drupal_json_output(array('status' => $status, /*'data' => $output, 'post' => $_POST,*/ 'cap' => $cap));
}

/**
 * Implements requests from users.
 * 
 * Returns json result data with OK or error.
 */
function hr_misc_makeRequest_ajax() {
  $status = TRUE;
  $output = '';
  
  //$post = $_POST;
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }
  
  if (empty($post) 
      || empty($post['source'])
      || empty($post['phones_amt'])
      //|| !isset($post['q_for']) || !$post['q_for']
      //|| !isset($post['buying_time']) || !$post['buying_time']
      || ( (isset($post['firstname']) && !$post['firstname']) || (isset($post['lastname']) && !$post['lastname']) || (isset($post['name']) && !$post['name']) )
      || ( strpos($post['firstname'], '/')  || strpos($post['lastname'], '/') || strpos($post['name'], '/') ) // name contains /, like in urls
      || (empty($post['email']) || !strpos($post['email'], '@') )
      || ( (empty($post['phone_1']) || empty($post['phone_2']) || empty($post['phone_3'])) && empty($post['phone']) )
     ) {
    $output = t('<div class="not-verified"><p class="error">The form is not filled!</p><p>Please, reload the page and try again.</p></div>'); 
  }
  elseif (empty($post['ct_captcha']) || $post['ct_captcha'] != $_SESSION['securimage_code_value']['default']){
    $output = t('<div class="not-verified"><p class="error">A Captcha code is wrong!</p><p> Please, reload the page and try again.</p><div class="not-verified">'); 
  }
  elseif (!isset($post['token']) /*|| !isset($_SESSION['requestQuoteToken']) || $post['token'] != $_SESSION['requestQuoteToken']*/){
    $output = t('<div class="not-verified"><p class="error">The form is outdated or broken.</p><p> Please, reload the page and try again.</p><div class="not-verified">'); 
  }
  else {
    
    $post['email'] = strtolower($post['email']);

    $current_time = time();
    
    // Mapping form data to right named fields.
    
    $phone = isset($post['phone']) ? $post['phone'] : $post['phone_1'] . '-' . $post['phone_2'] . '-' . $post['phone_3'];
    
    if ($post['source'] == 'page') {
      
      
      
      $submission = array(
        'Phones needed' => $post['phones_amt'],
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : '',
        'Quote type' => isset($post['q_type']) ? $post['q_type'] : '',
        'Buying Time Frame' => $post['buying_time'],
        'First Name' => isset($post['firstname']) ? $post['firstname'] : '',
        'Last Name' => isset($post['lastname']) ? $post['lastname'] : '',
        'Name' => isset($post['name']) ? $post['name'] : '',
        
        'Company' => isset($post['company']) ? $post['company'] : '',

        'Email' => $post['email'],
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Phone #' => $phone,
        'Monthly budget' => isset($post['budget']) ? $post['budget'] : '',

        'Source' => $post['source'],
        'Version' => $post['version'],
        //'Sumbission page' => $post['url'],
      );
      
      foreach ($submission as $key => $value) {
        if (!$value || $value == 'Optional' || $key == $value) {
          unset($submission[$key]);
        }
      }
      
      
      
      
      
      // Clear user's captured on the fly data and/or save request to the db.
      
      $save_submission = $submission;
      $save_submission['Submit Time'] = $current_time;
      if (isset($_SERVER['HTTP_USER_AGENT'])) {
        $save_submission['Browser'] = $_SERVER['HTTP_USER_AGENT'];
      }
      if (isset($post['referrer']) && $post['referrer']) {
        $save_submission['Referrer'] = $post['referrer'];
      }
      $save_submission['Sumbission page'] = $post['url'];
      /*
      if (isset($_SERVER['HTTP_REFERER']) && $_SERVER['HTTP_REFERER'] && !strpos($_SERVER['HTTP_REFERER'], '://hostingreview.org')) {
        $save_submission['Referrer'] = $_SERVER['HTTP_REFERER'];
      }
      */
      if (isset($_SESSION['ucaptured_timestamp'])) {
        $start_submission_time = $_SESSION['ucaptured_timestamp'];
        //$save_submission['Submission Duration'] = number_format((($current_time - $start_submission_time) / 60), 2, '.', '') . ' min';
        $save_submission['Submission Duration'] = $current_time - $start_submission_time;
        $result = db_update('hr_quote_requests')
          ->fields(array(
            'data' => serialize($save_submission),
            'status' => 2, // Submitted and sent.
            'checked' => 1, // Reviewed, because is sent.
            'email_presented' => $save_submission['Email'],
          ))
          ->condition('timestamp', $_SESSION['ucaptured_timestamp'])
          ->execute();
        unset($_SESSION['ucaptured_timestamp']);
      }
      else {
        // For some reason it wasn't still captured.
        $start_submission_time = $current_time;
        $result = db_insert('hr_quote_requests')
          ->fields(array(
            'timestamp' => $start_submission_time,
            'status' => 2, // Submitted and sent.
            'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
            'data' => serialize($save_submission),
            'checked' => 1, // Reviewed, because is sent.
            'email_presented' => $save_submission['Email'],
          ))
          ->execute();
      }  
      
      
      
        
      
    }
    else {
      
      // Quote Blocks...
      
      $submission = array(
        'Phones needed' => $post['phones_amt'],
        'Quote for' => isset($post['q_for']) ? $post['q_for'] : '',
        'Quote type' => isset($post['q_type']) ? $post['q_type'] : '',
        'Buying Time Frame' => $post['buying_time'],
        'Connection type' => isset($post['connection']) ? $post['connection'] : '',
        'First Name' => $post['firstname'],
        'Last Name' => $post['lastname'],
          
        'Company' => isset($post['company']) ? $post['company'] : '',
        'Website' => isset($post['website']) ? $post['website'] : '',
        'Email' => $post['email'],
        'Phone #' => $phone,
        'Notes' => isset($post['notes']) ? $post['notes'] : '',
          
        'Source' => $post['source'],
        'Version' => $post['version'],
        //'Sumbission page' => $post['url'],
      );      
      
      foreach ($submission as $key => $value) {
        if (!$value || $value == 'Optional' || $key == $value) {
          unset($submission[$key]);
        }
      }
      
    
      // Save data to db.
      
      $save_submission = $submission;
      $save_submission['Submit Time'] = $current_time;
      if (isset($_SERVER['HTTP_USER_AGENT'])) {
        $save_submission['Browser'] = $_SERVER['HTTP_USER_AGENT'];
      }
      if (isset($post['referrer']) && $post['referrer']) {
        $save_submission['Referrer'] = $post['referrer'];
      }
      $save_submission['Sumbission page'] = @$post['url'];
      
      $start_submission_time = $current_time;
      $result = db_insert('hr_quote_requests')
        ->fields(array(
          'timestamp' => $start_submission_time,
          'status' => 2, // Submitted and sent.
          'ip' =>  isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '',
          'data' => serialize($save_submission),
          'checked' => 1, // Reviewed, because is sent.
          'email_presented' => $save_submission['Email'],
          'via_block' => TRUE,
        ))
        ->execute();
      
    } // End of quote block
    
    
    
    $submission['User IP'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : '';
    $submission['Time'] = date('Y-m-d, H:i:s', time());
    
    $params['request_data'] = $submission;
    
    

    // Add an extra data.
    
    $submission_with_extra = $submission;
    
    $submission_with_extra['Sumbission page'] = $post['url'];
    if (isset($post['referrer']) && $post['referrer']) {
      $submission_with_extra['Referrer'] = $post['referrer'];
    }
    if(isset($_SERVER['HTTP_USER_AGENT'])) {
      $submission_with_extra['Browser'] = $_SERVER['HTTP_USER_AGENT'];
    }
    
    $params_with_extra['request_data'] = $submission_with_extra;
    
    /*
    $admins = db_query("SELECT u.uid FROM {users_roles} u INNER JOIN {role} r ON r.name = :role AND r.rid = u.rid WHERE 1", array(':role' => 'administrator')); 
    foreach ($admins as $admin) {
      // Comment to go live!
      //if($admin->uid != 1) continue;
      
      $recipient = user_load($admin->uid);
      $params['recipient'] = $recipient;
      drupal_mail('hr_misc', 'request_quote', $recipient->mail, user_preferred_language($recipient), $params);
    }
    */
    global $language;
    //$params['recipient'] = $recipient;
    //$letter = theme('hr_misc_requestQuote_mail', $post);//$params['request_data']);
    
    
    /*
    if ($submission['First Name'] == 'Nextiva' || $submission['First Name'] == 'nextiva') {
      // Test for Nextiva
      drupal_mail('hr_misc', 'request_quote', 'leads@hostingreview.org', $language->language, $params);
      
      // Send a lead to Remote providers.
      if ($submission['Source'] != 'block') {
        hr_misc_SendRequestToNextiva($submission);
      }
    }
    else
      */
      if ($submission['First Name'] != 'afs') {
      // Normal send if not a test from a4s
      drupal_mail('hr_misc', 'request_quote', 'leads@getvoip.com', $language->language, $params);
      
      // Send a lead to Remote providers.
      if ($submission['Source'] != 'block') {
        //hr_misc_SendRequestToVocalocity($submission);
        //hr_misc_SendRequestTo8x8($submission);
        ////hr_misc_SendRequestToNextiva($submission);
      }
    }
    // A test letter to the root.
    drupal_mail('hr_misc', 'request_quote', 'all4senses@gmail.com', $language->language, $params_with_extra);

    
    
    
    
    // Check for new captured but not sent data with emails in db, more than 1 hour old

    $query = db_select('hr_quote_requests', 'qr')
      ->fields('qr', array('data', 'ip', 'timestamp'));
    $query->condition('qr.status', 0);
    $query->condition('qr.checked', 0);
    
    
    //$query->condition('qr.email_presented', 1);
    
    $query->condition('qr.email_presented', '0', '!=');
    $query->condition('qr.email_presented', '', '!=');
    $query->isNotNull('qr.email_presented');
    
    $query->condition('qr.timestamp', $current_time - 3600, '<'); // 1 hour old
    $not_sents = $query->execute();

    foreach ($not_sents as $not_sent) {
      $ucaptured = unserialize($not_sent->data);

      // Send email.
      $ucaptured_data = hr_misc_setUcapturedVariable(NULL, $ucaptured, TRUE);
      $ucaptured_data += array(
        'User IP' => $not_sent->ip,
        'Start Submission Time' => date('Y-m-d, H:i:s', $not_sent->timestamp),
      );

      $params['ucaptured_data'] = $ucaptured_data;

      // Normal send
      if ($submission['First Name'] != 'afs') {
        drupal_mail('hr_misc', 'request_quote_ucaptured_data', 'leads@getvoip.com', $language->language, $params);
      }
      // Test letter to the root
      drupal_mail('hr_misc', 'request_quote_ucaptured_data', 'all4senses@gmail.com', $language->language, $params);
      
      // Update a status in DB.
      $result = db_update('hr_quote_requests')
        ->fields(array(
          'status' => 1, // Unsubmitted, sent.
          'checked' => 1, // Reviewed, because is sent.
        ))
        ->condition('timestamp', $not_sent->timestamp)
        ->execute();

    } // foreach ($not_sents as $not_sent) {

    
    
    
    
    $status = TRUE;
         
    
    if($submission['Version'] == 1) {
      $output = '<a class="guide" href="/pdfs/VoIP-Buyers-Guide-Questions.pdf" target="_blank">Download Your Free VoIP Buyer\'s Guide<img src="/sites/all/themes/hr/css/images/click-here-button.png" /></a><div class="quote-final">' . t('<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://hostingreview.org">hostingreview.org</a></p>') . '</div>';
    }
    else {
      $output = '<p><strong>Thank you</strong> for taking your time to complete our form. A VoIP Expert will be contacting you shortly to provide you with a personalized VoIP Service quote.</p><p>In the meantime, you can gain a great deal of VoIP information right here at <a href="http://hostingreview.org">hostingreview.org</a></p>'; 
    }
    
    if ($post['source'] == 'page') {
      switch ($post['version']) {
        case '1':
          //$output .= '<script>top.location.href="http://hostingreview.org/request-voip-phone-system-quote-final";</script>';
          break;
        
      }
      
    }
    
  }

  drupal_json_output(array('status' => $status, 'data' => $output, 'post' => $_POST, 'cap' => $_SESSION['securimage_code_value'], 'ses' => $_SESSION, 'ses_id' => session_id()/*, 'token' => $post['token'], 'test_token' => $test_token, 'valid_token' => $valid_token, 'letter' => $letter*/));
}

/*
 * 
double triggerring of a submit form because of double launching almost the same code from the Request quote block which actually hasn't appeared on the page anyway (before recent time it was absolutely the same so the problem was autosolved quietly :) 
 */





/**
 * Test page function for url /test.
 */
function hr_misc_getYoutubeVideoThumb($video_id) {
  
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/f');
  
  $url = 'http://img.youtube.com/vi/' . $video_id . '/0.jpg'; //'/maxresdefault.jpg';
  $file_local = $default_file_path . '/vthumbs/' . $video_id . '.jpg';
  $file_local_abs = DRUPAL_ROOT . '/' . $file_local;
  if (!hr_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)) {
    return $file_local;
  }
  else {
    return NULL; // Failed.
  }
}


/**
 * Test page function for url /test.
 */
function hr_misc_testPage() {
  
  $out = '<div>Start test...</div>';

      /*
      $var_p_all_data_quick = array();
      $p_nid_to_reset = 86;
      
      $query = db_select('field_revision_field_p_data_quick', 'f')
            ->fields('f', array('entity_id', 'field_p_data_quick_value'));
      $query->condition('f.entity_id', $p_nid_to_reset);
      $provider = $query->execute()->fetchObject();
      $var_p_all_data_quick[$p_nid_to_reset] = unserialize($provider->field_p_data_quick_value);
      
      $query = db_select('url_alias', 'a')
          ->fields('a', array('alias'));
      $query->condition('a.source', 'node/' . $p_nid_to_reset);

      $var_p_all_data_quick[$p_nid_to_reset]['subpath'] = '/' . $query->execute()->fetchField();

      $var_p_all_data_quick['timestamp'] = time();
      //$_SESSION['p_all_data_quick'] = $p_data_quick;
      //variable_set('p_all_data_quick', $var_p_all_data_quick);
      
      dpm($var_p_all_data_quick);
      
      $var_p_all_data_quick = variable_get('p_all_data_quick');
      
      dpm($var_p_all_data_quick);
      */
      
  unlink('cache/normal/www.hostingreview.org/___.html');
          
  return $out . '<br>End of Test';
}


/**
 * Import blog comments.
 */
function hr_misc_import_wp_blogComments() {
  
  $query = db_select('wp_comments', 'c')
    ->fields('c')
    ->condition('c.comment_approved', 1)
    ->condition('c.comment_approved', 'spam', '!=');
  $wp_comments = $query->execute();
  
  
  foreach ($wp_comments as $wp_comment) {
    
    //dpm($wp_comment);
   
    $query = db_select('field_data_field_old_id', 'oi');
    $query->leftJoin('node', 'n', 'n.nid = oi.entity_id');
    $query->condition('oi.field_old_id_value', $wp_comment->comment_post_ID);
    $query->fields('n', array('nid'));
    $node_nid = $query->execute()->fetchField();
    
    
    $comment = new stdClass();
    
    $comment->nid = $node_nid; // nid of a node you want to attach a comment to
    $comment->cid = 0; // leave it as is
    $comment->pid = 0; // parent comment id, 0 if none 
    $comment->uid = 0; // user's id, who left the comment
    $comment->mail = $wp_comment->comment_author_email; // user's email
    $comment->name = $wp_comment->comment_author  ; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
    $comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
    $comment->hostname = $wp_comment->comment_author_IP; // OPTIONAL. You can log poster's ip here
    $comment->is_anonymous = 1; // leave it as is
    $comment->homepage = $wp_comment->comment_author_url; // you can add homepage URL here
    $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
    $comment->language = LANGUAGE_NONE; // The same as for a node
    $comment->subject = ''; 
    $comment->comment_body[$comment->language][0]['value'] = $wp_comment->comment_content; // Everything here is pretty much like with a node
    $comment->comment_body[$comment->language][0]['format'] = 'filtered_html'; 

    comment_submit($comment); // saving a comment
  
    $comment->created = strtotime($wp_comment->comment_date); // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
    $comment->changed = $comment->created;

    //dpm($comment);
    
    
    hr_misc_comment_save($comment);
    
    $result = db_update('node')
      ->fields(array(
        'comment' => 1,
      ))
      ->condition('nid', $node_nid)
      ->execute();
    $result = db_update('node_revision')
      ->fields(array(
        'comment' => 1,
      ))
      ->condition('nid', $node_nid)
      ->execute();
    
    //break;
    
  }

}


/**
 * Create a comment.
 */
function hr_misc_createComment_FromOldWPblog() {
  
  $comment = new stdClass();
  
  $comment->nid = 331; // nid of a node you want to attach a comment to
  $comment->cid = 0; // leave it as is
  $comment->pid = 0; // parent comment id, 0 if none 
  $comment->uid = 0; // user's id, who left the comment
  $comment->mail = 'email@example.com'; // user's email
  $comment->name = 'User name'; // If user is authenticated you can omit this field, it will be auto-populated, if the user is anonymous and you want to name him somehow, input his name here
  $comment->thread = '01/'; // OPTIONAL. If you need comments to be threaded you can fill this value. Otherwise omit it.
  $comment->hostname = '127.0.01'; // OPTIONAL. You can log poster's ip here
  $comment->is_anonymous = 1; // leave it as is
  $comment->homepage = ''; // you can add homepage URL here
  $comment->status = COMMENT_PUBLISHED; // We auto-publish this comment
  $comment->language = LANGUAGE_NONE; // The same as for a node
  $comment->subject = 'Comment subject'; 
  $comment->comment_body[$comment->language][0]['value'] = 'Comment body text'; // Everything here is pretty much like with a node
  $comment->comment_body[$comment->language][0]['format'] = 'filtered_html'; 
  $comment->field_custom_field_name[LANGUAGE_NONE][0]['value'] = 'Some value'; // OPTIONAL. If your comment has a custom field attached it can added as simple as this // preparing a comment for a save
  
  comment_submit($comment); // saving a comment
  
  $comment->created = time(); // OPTIONAL. You can set any time you want here. Useful for backdated comments creation.
  $comment->changed = time();
  
  hr_misc_comment_save($comment);
}


/**
 * Accepts a submission of new or changed comment content.
 *
 * @param $comment
 *   A comment object.
 */
function hr_misc_comment_save($comment) {
  global $user;

  $transaction = db_transaction();
  try {
    $defaults = array(
      'mail' => '',
      'homepage' => '',
      'name' => '',
      'status' => user_access('skip comment approval') ? COMMENT_PUBLISHED : COMMENT_NOT_PUBLISHED,
    );
    foreach ($defaults as $key => $default) {
      if (!isset($comment->$key)) {
        $comment->$key = $default;
      }
    }
    // Make sure we have a bundle name.
    if (!isset($comment->node_type)) {
      
      
      // a4s fix. Make it a bit faster...
      //$node = node_load($comment->nid);
      
      $query = db_select('node', 'n')
        ->fields('n', array('type'))
        ->condition('nid', $comment->nid);
      $node = $query->execute()->fetchObject();
              
      $comment->node_type = 'comment_node_' . $node->type;
    }

    // Load the stored entity, if any.
    if (!empty($comment->cid) && !isset($comment->original)) {
      $comment->original = entity_load_unchanged('comment', $comment->cid);
    }

    field_attahr_presave('comment', $comment);

    // Allow modules to alter the comment before saving.
    module_invoke_all('comment_presave', $comment);
    module_invoke_all('entity_presave', $comment, 'comment');

    if ($comment->cid) {

      drupal_write_record('comment', $comment, 'cid');

      // Ignore slave server temporarily to give time for the
      // saved comment to be propagated to the slave.
      db_ignore_slave();

      // Update the {node_comment_statistics} table prior to executing hooks.
      _comment_update_node_statistics($comment->nid);

      field_attahr_update('comment', $comment);
      // Allow modules to respond to the updating of a comment.
      module_invoke_all('comment_update', $comment);
      module_invoke_all('entity_update', $comment, 'comment');
    }
    else {
      // Add the comment to database. This next section builds the thread field.
      // Also see the documentation for comment_view().
      if (!empty($comment->thread)) {
        // Allow calling code to set thread itself.
        $thread = $comment->thread;
      }
      elseif ($comment->pid == 0) {
        // This is a comment with no parent comment (depth 0): we start
        // by retrieving the maximum thread level.
        $max = db_query('SELECT MAX(thread) FROM {comment} WHERE nid = :nid', array(':nid' => $comment->nid))->fetchField();
        // Strip the "/" from the end of the thread.
        $max = rtrim($max, '/');
        // We need to get the value at the correct depth.
        $parts = explode('.', $max);
        $firstsegment = $parts[0];
        // Finally, build the thread field for this new comment.
        $thread = int2vancode(vancode2int($firstsegment) + 1) . '/';
      }
      else {
        // This is a comment with a parent comment, so increase the part of the
        // thread value at the proper depth.

        // Get the parent comment:
        $parent = comment_load($comment->pid);
        // Strip the "/" from the end of the parent thread.
        $parent->thread = (string) rtrim((string) $parent->thread, '/');
        // Get the max value in *this* thread.
        $max = db_query("SELECT MAX(thread) FROM {comment} WHERE thread LIKE :thread AND nid = :nid", array(
          ':thread' => $parent->thread . '.%',
          ':nid' => $comment->nid,
        ))->fetchField();

        if ($max == '') {
          // First child of this parent.
          $thread = $parent->thread . '.' . int2vancode(0) . '/';
        }
        else {
          // Strip the "/" at the end of the thread.
          $max = rtrim($max, '/');
          // Get the value at the correct depth.
          $parts = explode('.', $max);
          $parent_depth = count(explode('.', $parent->thread));
          $last = $parts[$parent_depth];
          // Finally, build the thread field for this new comment.
          $thread = $parent->thread . '.' . int2vancode(vancode2int($last) + 1) . '/';
        }
      }

      if (empty($comment->created)) {
        $comment->created = REQUEST_TIME;
      }

      if (empty($comment->changed)) {
        $comment->changed = $comment->created;
      }

      if ($comment->uid === $user->uid && isset($user->name)) { // '===' Need to modify anonymous users as well.
        $comment->name = $user->name;
      }

      // Ensure the parent id (pid) has a value set.
      if (empty($comment->pid)) {
        $comment->pid = 0;
      }

      // Add the values which aren't passed into the function.
      $comment->thread = $thread;
      
      // a4s fix
      ///////////////////////////////////////$comment->hostname = ip_address();

      drupal_write_record('comment', $comment);

      // Ignore slave server temporarily to give time for the
      // created comment to be propagated to the slave.
      db_ignore_slave();

      // Update the {node_comment_statistics} table prior to executing hooks.
      _comment_update_node_statistics($comment->nid);

      field_attahr_insert('comment', $comment);

      // Tell the other modules a new comment has been submitted.
      module_invoke_all('comment_insert', $comment);
      module_invoke_all('entity_insert', $comment, 'comment');
    }
    if ($comment->status == COMMENT_PUBLISHED) {
      module_invoke_all('comment_publish', $comment);
    }
    unset($comment->original);
  }
  catch (Exception $e) {
    $transaction->rollback('comment');
    watchdog_exception('comment', $e);
    throw $e;
  }

}


/**
 * Creates a node blog_post.
 */
function hr_misc_createNode_provider($form_state) { 
  
  global $user;
  
  $node = new stdClass();
  $node->type = 'provider';
  node_object_prepare($node);
  
  $node->date = $form_state['values']['post_date'];
  $node->created = $form_state['values']['created'];
  $node->changed = $form_state['values']['changed'];
  
          
  $node->title = $form_state['values']['title'];
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = $form_state['values']['body']['und'][0]['value'];
  $node->body[$node->language][0]['summary'] = $form_state['values']['body']['und'][0]['summary'];
  $node->body[$node->language][0]['safe_summary'] = check_plain($form_state['values']['body']['und'][0]['summary']);
  $node->body[$node->language][0]['safe_value'] = check_plain($form_state['values']['body']['und'][0]['value']);
  
  
  $node->field_p_data[$node->language][0] = array(
    'value' => $form_state['values']['field_p_data'],
    'safe_value' => check_plain($form_state['values']['field_p_data']),
    'format' => 'full_html',
  );
  
  $node->field_p_quick_data[$node->language][0] = array(
    'value' => $form_state['values']['field_p_data_quick'],
    'safe_value' => check_plain($form_state['values']['field_p_data_quick']),
    'format' => 'full_html',
  );
  
  $node->field_p_name[$node->language][0] = array(
    'value' => $form_state['values']['p_name'],
    'safe_value' => check_plain($form_state['values']['p_name']),
    'format' => 'full_html',
  );
  
  $node->field_old_id[$node->language][0]['value'] = $form_state['values']['ID'];
  
  $node->field_featured[$node->language][0]['value'] = $form_state['values']['field_featured'];

  $node->field_p_features = @$form_state['values']['field_p_features'];
  
  $node->field_p_types = @$form_state['values']['field_p_types'];
  
  $node->path = array(
    'alias' => $form_state['values']['url_alias'],
    'language' => $node->language,
    'pathauto' => 0,
  );
  
  //dpm($node);
  //return;
  
  if ($node = node_submit($node)) {
    node_save($node);
    drupal_set_message('Saved, Ok!', 'warning');
  }
  
}


/**
 * Imports blog_posts from a wp table.
 */
function hr_misc_import_wp_blogPosts() { 
  
  $query = db_select('wp_posts', 'p')
        ->fields('p', array('ID', 'post_content', 'post_title', 'post_name', 'post_parent', 'post_date', 'post_modified'));
//  $query->leftJoin('wp_term_relationships', 'tr', 'tr.object_id = p.ID');
//  $query->fields('tr', array('term_taxonomy_id'));
//  $query->leftJoin('wp_term_taxonomy', 'tt', 'tt.term_id = tr.object_id');
//  $query->fields('tt', array('taxonomy'));
  
//  $query->condition('tt.taxonomy', 'category');
  $query->condition('p.post_status', 'publish');
  $query->condition('p.post_type', 'post');
  //$query->condition('tr.term_taxonomy_id', 4); // 3 - Features, 4 - News
  
  $query->orderBy('ID');
  //$query->range(0, 20);
  $results = $query->execute()->fetchAllAssoc('ID');
  
  //dpm($results);
  
  

$drupal_categories = array (  
  'Articles' => 1,
  'Conferences' => 2,
  'Education' => 3,
  'General' => 4,
  'Rackspace CloudSites' => 5,
  'State of the Cloud' => 6,
  'Testimonials' => 7,
  'Uncategorized' => 8,
  'Videos' => 9,
  'vps.net' => 10,
);

$wp_categories = array (  
  7 => 'Articles',
  13 => 'Conferences',
  9 => 'Education',
  12 => 'General',
  11 => 'Rackspace CloudSites',
  10 => 'State of the Cloud',
  3 => 'Testimonials',
  1 => 'Uncategorized',
  8 => 'Videos',
  4 => 'vps.net',
);



$drupal_tags = array (
	'Cloud Computing Infographic' => 11,
	'cloud hosting' => 12,
	'Cloud Hosting History' => 13,
	'Cloud Hosting Infographic' => 14,
	'Cloud Hosting Timeline' => 15,
	'Cloud Infographic' => 16,
	'cloudsites' => 17,
	'infographics' => 18,
	'rackspace' => 19,
	'vps.net' => 20,
);

$wp_tags = array (
	14 => 'Cloud Computing Infographic',
	15 => 'cloud hosting',
	16 => 'Cloud Hosting History',
	17 => 'Cloud Hosting Infographic',
	18 => 'Cloud Hosting Timeline',
	19 => 'Cloud Infographic',
	6 => 'cloudsites',
	20 => 'infographics',
	5 => 'rackspace',
	4 => 'vps.net',
);
  
  
//  $category_map = array(
//    3 => 1, // Features
//    4 => 2, // News
//  );
  
  $form_states = array();
  
  foreach ($results as $result) {
    
    $query = db_select('wp_term_relationships', 'tr')
        ->fields('tr', array('term_taxonomy_id'));
    
    $query->leftJoin('wp_term_taxonomy', 'tt', 'tt.term_taxonomy_id = tr.term_taxonomy_id');
    $query->fields('tt', array('taxonomy', 'term_id'));
    $query->leftJoin('wp_terms', 't', 't.term_id = tt.term_id');
    $query->fields('t', array('name'));
    $query->condition('tr.object_id', $result->ID);
    $query->condition('tt.taxonomy', 'category');
    $cats = $query->execute()->fetchAllAssoc('term_id');
    
    foreach ($cats as $key => $value) {
      $cats[$key]->drupal_tid = @$drupal_categories[$wp_categories[$value->term_id]];
    }
    
    $query = db_select('wp_term_relationships', 'tr')
        ->fields('tr', array('term_taxonomy_id'));
    
    $query->leftJoin('wp_term_taxonomy', 'tt', 'tt.term_taxonomy_id = tr.term_taxonomy_id');
    $query->fields('tt', array('taxonomy', 'term_id'));
    $query->leftJoin('wp_terms', 't', 't.term_id = tt.term_id');
    $query->fields('t', array('name'));
    $query->condition('tr.object_id', $result->ID);
    $query->condition('tt.taxonomy', 'post_tag');
    $tags = $query->execute()->fetchAllAssoc('term_id');
    
    foreach ($tags as $key => $value) {
      $tags[$key]->drupal_tid = @$drupal_tags[$wp_tags[$value->term_id]];
    }
    
    //dpm($terms);
    
    $form_state['values'] = array(
      'title' => $result->post_title,
      'post_date' => $result->post_date,
      'created' => strtotime($result->post_date),
      'changed' => strtotime($result->post_modified),
      //'category' => @$drupal_categories[$wp_categories[$result->term_taxonomy_id]],
      //'category_name' => @$wp_categories[$result->term_taxonomy_id],
      //'url_alias' => date('Y\/m', strtotime($result->post_date)) . '/' . $result->post_name,
      'url_alias' => 'blog/' . $result->post_name,
      'ID' => $result->ID,
      'categories' => $cats,
      'tags' => $tags,
    );
    
    $form_state['values']['body']['und'][0]['value'] = str_replace('--', '-', $result->post_content);
    
    if (preg_match('/(.*)<!--more-->(.*)/s', $form_state['values']['body']['und'][0]['value'], $matches)) {
      //dpm($matches);
      ////$form_state['values']['body']['und'][0]['value'] = $matches[1] . /*'<span id="more"></span>' .*/ $matches[2];
      ////////$form_state['values']['body']['und'][0]['summary'] = $matches[1] . '<p><a href="/' . $form_state['values']['url_alias'] . '#more" class="more-link">Read the rest of this entry Р В Р’В Р Р†Р вЂљРІвЂћСћР В РІР‚в„ўР вЂ™Р’В»</a></p>';
      $form_state['values']['body']['und'][0]['summary'] = $matches[1];
      //$body_full_markup = preg_replace('|\[video:.*(http.*)\]|', '<a href="$1"> [Watch a video] </a>', $body_full_markup);
    }
    else {
      $form_state['values']['body']['und'][0]['summary'] = '';
    }
    
    $form_states[] = $form_state;
    // Add only one node.
    hr_misc_createNode_BlogPost($form_state);
//    if ($result->ID == 49) {
//      break;
//    }
    
  }
  
  //dpm($form_states);
}


/**
 * Creates a node blog_post.
 */
function hr_misc_createNode_BlogPost($form_state) { 

  
  // Creating a node via drupal_form_submit()
  // http://api.drupal.org/api/drupal/includes%21form.inc/function/drupal_form_submit/7
  
  /*
  

  
  define('DRUPAL_ROOT', getcwd());
  include_once 

  DRUPAL_ROOT . '/includes/bootstrap.inc';
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
  bootstrap_invoke_all('init');
  ini_set('memory_limit', '512M');
  //Authenticate as user 1
  user_authenticate('user', 'password');
  module_load_include('inc', 'node', 'node.pages');  // new for Drupal 6


  $form_state = array();
  $nodeTmp = array('type' => testimonial); // a variable holding the content type
   

   $form_state['values']['type'] = 'testimonial';
   $form_state['values']['status'] = 1;
   $form_state['values']['title'] = 'test1';   // the node's title
   $form_state['values']['body'] = 'just my test node'; // the body, not required
   $form_state['values']['field_name'] =  t('adham allam');
   $form_state['values']['status'] = 1; //publish all imported nodes
   $form_state['values']['promote'] = 1; //promote all imported nodes
   $form_state['values']['sticky'] = 0; //remove sticky from imported nodes
   $form_state['values']['image'] = array();
   $form_state['values']['name'] = 'adham';
   $form_state['values']['op'] = t('Save');  // this seems to be a required value
  
   drupal_form_submit('testimonial_node_form', $form_state, (object)$nodeTmp);
  
  */
  
  
  global $user;
  
  $node = new stdClass();
  $node->type = 'blog_post';
  node_object_prepare($node);
  
  $node->date = $form_state['values']['post_date'];
  $node->created = $form_state['values']['created'];
  $node->changed = $form_state['values']['changed'];
  
          
  $node->title = $form_state['values']['title'];
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->sticky = 0;
  $node->comment = 0;
  
  $node->body[$node->language][0]['format'] = 'full_html';
  $node->body[$node->language][0]['value'] = $form_state['values']['body']['und'][0]['value'];
  $node->body[$node->language][0]['summary'] = $form_state['values']['body']['und'][0]['summary'];
  $node->body[$node->language][0]['safe_summary'] = check_plain($form_state['values']['body']['und'][0]['summary']);
  $node->body[$node->language][0]['safe_value'] = check_plain($form_state['values']['body']['und'][0]['value']);
  
  $node->field_extra_data[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  $node->field_main_image[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  $node->field_a_teaser[$node->language][0] = array(
    'value' => NULL,
    'safe_value' => NULL,
    'format' => 'full_html',
  );
  
  $node->field_old_id[$node->language][0]['value'] = $form_state['values']['ID'];
  
  //$node->field_categories[$node->language][0]['tid'] = $form_state['values']['category'];
  
  foreach ($form_state['values']['categories'] as $key => $value) {
    $node->field_categories[$node->language][] = array('tid' => $value->drupal_tid);
  }
  
  foreach ($form_state['values']['tags'] as $key => $value) {
    $node->field_tags[$node->language][] = array('tid' => $value->drupal_tid);
  }
  
  
  $node->path = array(
    'alias' => $form_state['values']['url_alias'],
    'language' => $node->language,
    'pathauto' => 0,
  );
  
//  dpm($node);
//  return;
  
  if ($node = node_submit($node)) {
    node_save($node);
    drupal_set_message('Saved, Ok!', 'warning');
  }
  
}


/**
 * Return a time in the format like x min ago, etc...
 */
function hr_misc_elapsed_time($timestamp, $precision = 2) { 
  $time = time() - $timestamp; 
  $a = array('decade' => 315576000, 'year' => 31557600, 'month' => 2629800, 'week' => 604800, 'day' => 86400, 'hour' => 3600, 'min' => 60, 'sec' => 1); 
  $i = 0; 
    foreach($a as $k => $v) { 
      $$k = floor($time/$v); 
      if ($$k) $i++; 
      $time = $i >= $precision ? 0 : $time - $$k * $v; 
      $s = $$k > 1 ? 's' : ''; 
      $$k = $$k ? $$k.' '.$k.$s.' ' : ''; 
      @$result .= $$k; 
    } 
  return $result ? $result.'ago' : '1 sec to go'; 
} 



 

/**
 * Curl - GET.
 */
function hr_misc_curlGET($url) {
  
  // GET.
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  
  // If POST.
  //  curl_setopt($curl, CURLOPT_POST, TRUE);
  //  curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
  
  $data_from = curl_exec($curl);
  curl_close($curl);
  
  return $data_from;
}




/**
 * Implements hook_mail().
 */
function hr_misc_mail($key, &$message, $params) {
  switch ($key) {
    case 'request_quote':
      $message['subject'] = 'HR New request for a quote';
      $message['body'][] = theme('hr_misc_requestQuote_mail', $params['request_data']);
      break;
    
    case 'request_quote_ucaptured_data':
      $message['subject'] = 'HR New captured BUT not submitted user data';
      $message['body'][] = theme('hr_misc_requestQuote_mail', $params['ucaptured_data']);
      break;
    
    
    case 'new_disqus_user':
      $message['subject'] = 'HR Disqus users check up results';
      $message['body'][] = $params['report'];
      break;
    
    case 'email_verification':
      $message['subject'] = 'Submitted Review Requires One-Click Email Verification';
      $message['body'][] = t('Dear User,

Thank you for taking your time to share your experience by submitting a review.

To faster verify and publish your review, please click on the email verification link below:

!url

Best Wishes,
bestwebhosting Team
', array('!url' => 'http://hostingreview.org/approve/email/' . $params['verification_code']));
      
      break;
    
    
    
    
    case 'new_review_admin_notify':
      $message['subject'] = t('HR New Provider review for "!provider" has been submitted', array('!provider' => $params['provider_name']));
      $message['body'][] = t('Dear administrator!

A new review for the provider "!provider" just has been submitted' . ($params['spam'] ? ' (perhaps it is SPAM)' : '') . ':

' . 

$params['review'] .
              
'
  

Please approve or discard it at !pending_reviews.

Please, don\'t forget to log in to access this page.

Best wishes,
bestwebhosting Team
', array('!pending_reviews' => 'http://hostingreview.org/admin/content/approve-reviews', '!provider' => $params['provider_name']));
      
      break;
    
    
    
    
    
    case 'user_message':
      $message['subject'] = 'New User message from HR block';
      $message['body'][] = 
'First name: ' . $params['fname'] . '

Last name: ' . $params['lname'] . '

Email: ' . $params['email'] . '

Subscribed: ' . $params['subscribed'] . '  


Message: ' . $params['message'] . '


Best Wishes,
bestwebhosting Team
';
      
      break;
    
    
  }
}  


/**
 * Simple theming of a Request for quote mail content.
 */
function theme_hr_misc_requestQuote_mail($data) {
 $out = 'Quote Request submission form:

';
 foreach ($data as $key => $value) {
   if ($value) {
    $out .= "$key = $value
";
   }
 }
 
 return $out;
}


/**
 * Simple theming of the email with Captured but not submitted by a user data on a Request a quote page.
 */
function theme_hr_misc_requestQuoteCaptured_mail($data) {
 $out = 'Captured (and not submitted by a user) data from a Quote Request submission form:

';
 foreach ($data as $key => $value) {
   if ($value) {
    $out .= "$key = $value
";
   }
 }
 
 return $out;
}


/**
* Implementation of hook_mail_alter().
* Here we allow the site name to be used as the senders name for outgoing email.
* see http://drupal.org/node/209672
* 
* No need for this hook if the smtp module is used.
*/
/*
function hr_misc_mail_alter(&$message){
  $default_from = variable_get('site_mail', ini_get('sendmail_from'));
  
  if($message['from'] == $default_from){
    $message['from'] = '"'. variable_get('site_name', 'www.hostingreview.org') .'" <'. $default_from .'>';
    $message['headers']['From'] = $message['headers']['Sender'] = $message['headers']['Return-Path'] = $message['headers']['Errors-To'] = $message['headers']['Reply-To'] = $message['from'];
  }
}
*/


/**
 * Helper function to send preset messages.
 */
function hr_misc_sendMessage($tag, $data = NULL) {
  
  switch ($tag) {
    
    case 'new_phone_review_admin_notify':
      global $language;
      $params['phone_name'] = $data['phone_name'];
      drupal_mail('hr_misc', 'new_phone_review_admin_notify', 'ry@hostingreview.org', $language->language, $params);
      drupal_mail('hr_misc', 'new_phone_review_admin_notify', 'all4senses@gmail.com', $language->language, $params);
      
      break;
  
    
    case 'new_review_admin_notify':
      /*
      $admins = hr_misc_getAdmins();
      foreach ($admins as $recipient) {
        $params['recipient'] = $recipient;
        drupal_mail('hr_misc', 'new_review_admin_notify', $recipient->mail, user_preferred_language($recipient), $params);
      }
      */
      global $language;
      $params['provider_name'] = $data['provider_name'];
      $params['spam'] = $data['spam'];
      $params['review'] = $data['review'];
      
      drupal_mail('hr_misc', 'new_review_admin_notify', 'ry@hostingreview.org', $language->language, $params);
      drupal_mail('hr_misc', 'new_review_admin_notify', 'all4senses@gmail.com', $language->language, $params);
      
      
      break;
  

      
  case 'email_verification':
      
      global $language;
      $params['verification_code'] = $data['verification_code'];
      drupal_mail('hr_misc', 'email_verification', $data['email'], $language, $params, 'hostingreview.org <contact@hostingreview.org>');
      
      break;
    
  case 'user_message':
      
      global $language;
      $params['message'] = $data['message'];
      $params['fname'] = $data['fname'];
      $params['lname'] = $data['lname'];
      $params['email'] = $data['email'];
      $params['subscribed'] = $data['subscribed'];
      drupal_mail('hr_misc', 'user_message', 'all4senses@gmail.com', $language, $params, 'hostingreview.org <contact@hostingreview.org>');
      drupal_mail('hr_misc', 'user_message', 'ry@getvoip.com', $language, $params, 'hostingreview.org <contact@hostingreview.org>');
      
      break;
    
  }
}


/**
 * Get site's admins objects.
 */
function hr_misc_getAdmins() {
  $query = db_select('users', 'u')
        ->fields('u');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('role', 'r', 'r.rid = ur.rid');
  $query->condition('r.name', 'administrator');
  $admins = $query->execute()->fetchAllAssoc('uid');

  return $admins;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function hr_misc_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id);dpm($form);
  
  // Unlink Ckeditor from the comment input form.
  /*
  if($form['#id'] == 'comment-form') {
    $form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  */
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Returns topics list for a specific content type. 
 * 
 * Allows to use same topics for News, articles, etc.
 */
function hr_misc_getTopics($content_type, $base_url = NULL, $limit = NULL, $pager = NULL, $pages_per_page = 30) {
  $topics = NULL;
  
  $main_topics_voc = taxonomy_vocabulary_machine_name_load(TOPICS);
  
  // Old style query, for reference.
  // $results = db_query("SELECT td.name, COUNT(n.nid) AS count FROM {taxonomy_term_data} td LEFT JOIN {taxonomy_index} ti ON ti.tid = td.tid INNER JOIN {node} n ON (n.nid = ti.nid AND n.type = :type) WHERE td.vid = :vid GROUP BY td.name LIMIT $limit", array(':vid' => $voc->vid, ':type' => $content_type));
    
  $types = array();

  if ($pager) {
    $query = db_select('taxonomy_term_data', 'td')->extend('pagerDefault')->limit($pages_per_page);
  }
  else {
    $query = db_select('taxonomy_term_data', 'td');
  }
  
  $query->fields('td', array('name', 'tid', 'description'));
  $query->leftJoin('taxonomy_index', 'ti', 'ti.tid = td.tid');
  $query->leftJoin('node', 'n', 'n.nid = ti.nid');
  $query->where('n.nid = ti.nid AND n.type = :type', array(':type' => $content_type))
        ->addExpression('COUNT(n.nid)', 'count');
  $query->groupBy('td.name');
  // Exclude main topics terms -> choose only terms for specific node type.
  $query->condition('td.vid', $main_topics_voc->vid, '!=');
  $query->orderBy('count', 'DESC');
  if ($limit) {
    $query->range(0, $limit);
  }
  $results = $query->execute();

  // Necessary for pathauto_cleanstring().
  module_load_include('inc', 'pathauto');

  foreach($results as $result) {
    // Translate terms to the current language.
    // $result->name = i18n_string_translate(array('taxonomy', 'term', $result->tid, 'name'), $result->name);
    $base_url = trim($base_url, '/');
    //$result->link = array('link_title' => $result->name, 'href' => $base_url . '/' . urlencode(drupal_strtolower($result->name)));
    ////$result->link = array('link_title' => $result->name, 'href' => $base_url . '/tags/' . str_replace(array(' ', '.'), array('-', ''), drupal_strtolower($result->name)));
    
    //$result->link = array('link_title' => $result->name, 'href' => $base_url . '/tags/' . pathauto_cleanstring($result->name)); // WRONG WAY!
    $result->link = array('link_title' => $result->name, 'href' => 'taxonomy/term/' . $result->tid);
    
    $topics[$result->tid] = /*(array)*/ $result;
  }
  return $topics;
}


/**
 * Implements hook_theme().
 */
function hr_misc_theme($existing, $type, $theme, $path) {
  return array(
    'hr_misc_trendMark' => array(
      'variables' => array('vars' => null),
    ),
    'hr_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
    ),
    'hr_misc_submenuSimple_twoColumns' => array(
      'variables' => array('vars' => null),
    ),
    'hr_misc_submenuSimple_byColumns' => array(
      'variables' => array('vars' => null),
    ),
    'hr_misc_socialLinks' => array(
      'variables' => array('vars' => null),
    ),
    'hr_misc_socialLinks_twoColumns' => array(
      'variables' => array('vars' => null),
    ),
    // Fivestar REPLACING theme functions.
    'hr_misc_fivestar_static' => array(
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote', 'widget' => array('name' => 'default', 'css' => '')),
    ),
    // Compose a mail with a Request for a quote page/block.
    'hr_misc_requestQuote_mail' => array(
      'variables' => array(),
    ),
    // Compose a mail with a Captured but not submitted by a user data from a Request for a quote page/block.
    'hr_misc_requestQuoteCaptured_mail' => array(
      'variables' => array(),
    ),
    
      
    // Altered Tagadelic weighted tag cloud.
    'hr_misc_tagadelicWeighted_acceptPredefinedTermsPaths' => array(
      'variables' => array('terms' => array())
    ),
      
    // A bit altered original Theme functions theme_image
    // Here we add an image dimensions if they are not set.
    'hr_misc_image' => array(
      'variables' => array(
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),  
      
    // A bit altered original Theme functions theme_image_style
    // Here we add an image dimensions if they are not set.
    'hr_misc_image_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
      
  );
}


/*
 * Theme trend marks for providers tables.
 */
function theme_hr_misc_trendMark(array $variables) {
  switch ($variables['value']) {
    case 1:
      $class = 'trend pos';
      break;
    case 0: 
      $class = 'trend neu';
      break;
    case -1: 
      $class = 'trend neg';
      break;
  }
  return '<div class="' . $class . '">' . $variables['value'] . '</div>';
}


function theme_hr_misc_image_style(array $variables) {
  
  
  // Check if a file exists only for anonymous.
//  global $user;
//  if (!$user->uid && !file_exists($variables['path'])) {
//    return NULL;
//  }
  
  
  if (!empty($variables['src']) && !file_exists(ltrim($variables['src'], '/'))) {
    return NULL;
  }
  
  
  $image_src = image_style_url($variables['style_name'], $variables['path']);
  $image = theme('hr_misc_image', array('path' => $image_src, 'source_path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
        
  return $image;
}


function theme_hr_misc_image(array $variables) {
  
//  if (!file_exists(str_replace(array('http://hostingreview.org/', '%20'), array('', ' '), $variables['path']))) {
//    return NULL;
//  }
  
  // Add dimensions only for anonymous.
  //global $user;
  if (/*!$user->uid &&*/ !$variables['width']) {
    
    
    if(!$size = getimagesize($variables['path'])) {
      // Refresh Session providers data, In case the error is caused by obsolete data for providers which has not been refreshed in SESSION
      hr_misc_getProvidersDataQuick('all', TRUE, TRUE);
      return NULL;
    }
    
    $image = theme('image', array('width' => $size[0], 'height' => $size[1], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));  
  }
  else {
    $image = theme('image', array('width' => $variables['width'], 'height' => $variables['height'], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
  }

  return $image;
}


/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function theme_hr_misc_tagadelicWeighted_acceptPredefinedTermsPaths(array $vars) {
  $terms = $vars['terms'];
  $output = '';

  foreach ($terms as $term) {
    $output .= l($term->name, isset($term->link['href']) ? $term->link['href'] : 'taxonomy/term/' . $term->tid, array(
      'attributes' => array(
        'class' => array("tagadelic", "level" . $term->weight),
        'rel' => 'tag',
        'title'  => $term->description,
        )
      )
    ) . " \n";
  }
  
  
  if(isset($vars['voc'])){
    if (count($terms) >= variable_get('tagadelic_block_tags_' . $vars['voc']->vid, 12)) {
      $output .= theme('more_link', array('title' => t('more tags'), 'url' => "tagadelic/chunk/{$vars['voc']->vid}"));
    }
  }

  return $output;
}
  

/**
 * Simple theming of nested submenu.
 */
function theme_hr_misc_socialLinks($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'social-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<div class="' . $class . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    //$out .= ($count ? $delimiter : '') . '<div>' . l(t($submenu['link']['link_title']), $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</div>';
    
    if ($submenu['link']['link_title'] == 'GooglePlus') {
      $out .= ($count ? $delimiter : '') . '<div>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank', 'rel' => 'publisher' ))) . '</div>';
    }
    else {
      $out .= ($count ? $delimiter : '') . '<div>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</div>';
    }
    
    $count++;
  }
  $out .= '</div>';
  return $out;
}


/**
 * Simple theming of nested submenu twoColumns.
 */
function theme_hr_misc_socialLinks_twoColumns($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'social-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<div class="' . $class . '"><div class="col-1">';
  $count = 0;
  $amount = count($vars['submenu']['below']);
  $second = FALSE;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    if (!$second && $count > ($amount - 1)/2) {
      $out .= '</div><div class="col-2">';
      $second = TRUE;
    }
    
    $out .= ($count ? $delimiter : '') . '<div>' . l(t($submenu['link']['link_title']), $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</div>';
    $count++;
  }
  $out .= '</div></div>';
  return $out;
}


/**
 * Simple theming of nested submenu.
 */
function theme_hr_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="hr ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= '<li>' . theme('hr_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * Simple theming of nested submenu, two columns.
 */
function theme_hr_misc_submenuSimple_twoColumns($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  //$out = '<ul class="hr ' . $class . ' lvl-' . $level . '"><div class="col-1">';
  $out = '<div class="hr ' . $class . ' lvl-' . $level . '"><div class="col-1">';
  $count = 0;
  $amount = count($vars['submenu']['below']);
  $second = FALSE;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    if (!$second && $count > ($amount - 1)/2) {
      $out .= '</div><div class="col-2">';
      $second = TRUE;
    }
    
    //$out .= ($count ? $delimiter : '') . '<li>';
    $out .= ($count ? $delimiter : '') . '<div>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    //$out .= '</li>';
    $out .= '</div>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      //$out .= '<li>' . theme('hr_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
      $out .= '<div>' . theme('hr_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</div>';
    }
    $count++;
  }
  //$out .= '</div></ul>';
  $out .= '</div></div>';
  return $out;
}


/**
 * Simple theming of nested submenu, by columns.
 */
function theme_hr_misc_submenuSimple_byColumns($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  
  $out = '';
  foreach ($vars['submenu']['below'] as $m) {
    if ($m['link']['hidden']) {
      continue;
    }
    $sub = '';
    //dpm($m['below']);
    foreach ($m['below'] as $sub_m) {
      if (!$sub_m['link']['hidden']) {
        $sub .= '<li>' . l($sub_m['link']['link_title'], $sub_m['link']['link_path']) . '</li>';
      }
    }
    $out .= '<div class="col"><div class="title">' . $m['link']['link_title']. '</div><ul>' . $sub . '</ul></div>';
  }
  
  return $out;
}


/**
 * REPLACE FOR ORIGINAL fivestar module theming function. Just to use only its theming functionality.
 * 
 * Display a plain HTML view-only version of the widget with a specified rating.
 *
 * @param $rating
 *   The desired rating to display out of 100 (i.e. 80 is 4 out of 5 stars).
 * @param $stars
 *   The total number of stars this rating is out of.
 * @param $tag
 *   Allows multiple ratings per node.
 * @return
 *   A themed HTML string representing the star widget.
 */
function theme_hr_misc_fivestar_static($variables) {
  $rating  = $variables['rating'];
  $stars = $variables['stars'];
  $tag = $variables['tag'];
  $widget = $variables['widget'];

  // hr Intrusion!!!!
  $path = drupal_get_path('module', 'hr_misc') . '/css/fivestar';
  drupal_add_css($path . '/css/fivestar.css');
  // END of intrusion.
  
  if($widget['name'] != 'default') {
    // hr changes.
    //drupal_add_css($widget['css']);
    drupal_add_css($path . '/widgets/' . $widget['name'] . '/' . $widget['css']);
  }
  
  $output = '<div class="fivestar fivestar-' . $widget['name'] . '">';
  $output .= '<div class="fivestar-widget-static fivestar-widget-static-'. $tag .' fivestar-widget-static-'. $stars . ' clearfix">';
  if (empty($stars)) {
    $stars = 5;
  }
  $numeric_rating = $rating/(100/$stars);
  for ($n=1; $n <= $stars; $n++) {
    $star_value = ceil((100/$stars) * $n);
    $prev_star_value = ceil((100/$stars) * ($n-1));
    $zebra = ($n % 2 == 0) ? 'even' : 'odd';
    $first = $n == 1 ? ' star-first' : '';
    $last = $n == $stars ? ' star-last' : '';
    $output .= '<div class="star star-'. $n .' star-'. $zebra . $first . $last .'">';
    if ($rating < $star_value && $rating > $prev_star_value) {
      $percent = (($rating - $prev_star_value) / ($star_value - $prev_star_value)) * 100;
      $output .= '<span class="on" style="width: '. $percent .'%">';
    }
    elseif ($rating >= $star_value) {
      $output .= '<span class="on">';
    }
    else {
      $output .= '<span class="off">';
    }
    if ($n == 1)$output .= $numeric_rating;
    $output .= '</span></div>';
  }
  $output .= '</div></div>';
  return $output;
}



/**
 * Returns all available providers aray with title => title.
 */
function hr_misc_getProvidersKeyedByName(&$providers, $scope = 'all', $data = NULL) {
  $providers_out = array();
  
  //function gv_misc_getProviders(&$providers, $scope = 'all', $data = NULL, $cache_key = '', $only_featured = NULL, $no_cache = FALSE) {
  hr_misc_getProviders($providers, $scope, $data);
  foreach ($providers as $key => $value) {
    if ($key == '_none' || $key == '') {
      $providers_out[$key] = $value;
    }
    else {
      $providers_out[$value] = $value;
    }
  }
  
  $providers = $providers_out;
}


/**
 * Returns all available providers aray with nid => title.
 */
function hr_misc_getProviders(&$providers, $scope = 'all', $data = NULL, $cache_key = '', $only_featured = NULL, $no_cache = FALSE) {
  
  
  global $language;
  $cache_name = 'hr_provider_list_' . $scope . '_' . $language->language . $cache_key;
  
  if (!$no_cache) {
    $cache_content = cache_get($cache_name);
    if ($cache_content && !empty($cache_content->data) && $cache_content->expire > time()) {
      $providers += $cache_content->data;
      return;
    }
  }
  //dpm('plist no cache');
  
  
  if ($scope == 'all') {
    $query = db_select('node', 'n');
    //$query->join('field_data_field_p_types', 'pt', "pt.entity_id = n.nid"); 
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid");
    $query->fields('n', array('nid', 'title'))  
          //->fields('pt', array('field_p_types_value'))
          ->fields('pn', array('field_p_name_value')) 
          ->condition('n.type', 'provider')
          ->condition('n.status', 1); 
    
    
    
    
    if ($cache_key == 'featured' || $only_featured) {
      // Get only featured providers.
      $query->leftJoin('field_data_field_p_listposition', 'l', "l.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_listposition_ch', 'l_ch', "l_ch.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_listposition_vps', 'l_vps', "l_vps.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_listposition_ds', 'l_ds', "l_ds.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_listposition_wp', 'l_wp', "l_wp.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_listposition_wb', 'l_wb', "l_wb.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_listposition_sh', 'l_sh', "l_sh.entity_id = n.nid");
      $query->leftJoin('field_data_field_p_listposition_cp', 'l_cp', "l_cp.entity_id = n.nid");
      
      $or = db_or()->isNotNull('field_p_listposition_value')
                   ->isNotNull('field_p_listposition_ch_value')
                   ->isNotNull('field_p_listposition_vps_value')
                   ->isNotNull('field_p_listposition_ds_value')
                   ->isNotNull('field_p_listposition_wp_value')
                   ->isNotNull('field_p_listposition_wb_value')
                   ->isNotNull('field_p_listposition_sh_value')
                   ->isNotNull('field_p_listposition_cp_value')
              ;
      $query->condition($or);
    }
    
    
    $result = $query->execute(); 

    foreach($result as $provider) {
      $providers[$provider->nid] = $provider->field_p_name_value;// . ' - ' . $provider->field_p_types_value; // = $provider->title;
    }

    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }
  elseif ($scope == 'all_by_service_type') {
    $query = db_select('node', 'n');
    $query->join('field_data_field_p_types', 'pt', "pt.entity_id = n.nid"); 
    $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid");
    $query->fields('n', array('nid', 'title'))  
          ->fields('pt', array('field_p_types_value'))
          ->fields('pn', array('field_p_name_value')) 
          ->condition('n.type', 'provider')
          ->condition('n.status', 1);
    if (is_array($data)) {
      $query->condition('pt.field_p_types_value', $data, 'IN');
    }
    else {
      $query->condition('pt.field_p_types_value', $data);
    }
    $result = $query->execute(); 

    foreach($result as $provider) {
      //////$providers[$provider->nid] = $provider->field_p_name_value;// . ' - ' . $provider->field_p_types_value; // = $provider->title;
      $providers[$provider->field_p_name_value] = $provider->field_p_name_value;// . ' - ' . $provider->field_p_types_value; // = $provider->title;

      //$p[$provider->nid] = $provider;
    }
    
    //dpm($p);

    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }
  elseif ($scope == 'all_including_others_from_reviews') {
    $query = db_select('field_data_field_r_provider_name', 'pn');
    //$query->fields('n', array('nid', 'title'))
    $query->fields('pn', array('field_r_provider_name_value'))
          ->distinct(); 
    $result = $query->execute(); 
    foreach($result as $provider) {
      $providers[$provider->field_r_provider_name_value] = $provider->field_r_provider_name_value; // = $provider->title;
    }
    // Sort providers alphabetically.
    //SORT_NATURAL | SORT_FLAG_CASE   only for php from 5.4.0
    //asort($providers); 
    natcasesort($providers);
  }
  
  
  if (!$no_cache && count($providers)> 3) {
    cache_set($cache_name, $providers, 'cache', time() + 14400);
  }

}
    

/**
 * Checks if the email is already taken by one of the site's registered user.
 */
function hr_misc_emailIsRegistered($email) {
  $data = db_select('users', 'u')
          ->fields('u', array('uid'))
          ->condition('mail', $email)
          ->execute();
  if ($email = $data->fetchField()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}




/**
 * Check if a current user already submitted a review for a specific Provider and return it if it exists.
 */
function hr_misc_userHasSubmittedReview($provider_nid, $user_uid, $user_email = NULL, $other_provider_title = NULL, $current_review_nid = NULL) {
  
  if (!$user_uid && !$user_email) {
    // Not full source data...
    // For uid = 0 should be set email also.
    return FALSE;
  }
  
  $data = db_select('node', 'n')
        ->fields('n', array('nid', 'title'))
        ->fields('na', array('field_r_notapproved_value'));
  $data->leftJoin('field_data_field_ref_provider', 'rp', "rp.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_oprovider', 'op', "op.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_email', 'ue', "ue.entity_id = n.nid");
  $data->leftJoin('field_data_field_r_notapproved', 'na', "na.entity_id = n.nid");
  $data->condition('n.type', 'review')
       //->condition('n.uid', $user_uid)
       ;
  
  // For an anonymous user check email as well (we can find a user only that way in this case)
  if ($user_email) {
    // Let's check email instead if uid, as there could exist a review (from other user,  authorized or not) with a such email
    $data->condition('ue.field_r_email_value', $user_email);
  }
  
  // exclude a currently submitted review from the search.
  if ($current_review_nid) {
    $data->condition('n.nid', $current_review_nid, '!=');
  }
  
  if ($provider_nid) {
    $data->condition('rp.field_ref_provider_target_id', $provider_nid);
  }
  elseif ($other_provider_title) {
    $data->condition('op.field_r_oprovider_value', $other_provider_title);
  }
  else {
    // No provider id or title set.
    return FALSE;
  }
  
  $data = $data->execute()->fetchObject();
  
  if (empty($data)) {
    return FALSE;
  }
  else {
    return $data;
  }
}


/**
 * Implements hook_token_info().
 */
function hr_misc_token_info() {
  // Defines new token 'Provider name' in the node torens group.
  $info['tokens']['node']['provider-name-for-current-review'] = array(
    'name' => t('Provider name for a current review'),
    'description' => t('Name of the provider chosen from a select list or from a custom field if its provided...'),
  );

  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function hr_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {
  /*
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'provider-name-for-current-review':
          if ($node->type == 'review') {
            if (isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
              
//              $provider_title = db_select('node', 'n')
//                ->fields('n', array('title'))
//                ->condition('nid', $node->field_ref_provider['und'][0]['target_id'])
//                ->execute()->fetchField();
              
              
              $query = db_select('node', 'n');
              $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid"); // inner_join file_usage table against file_managed
              //$query->fields('n', array('nid', 'title'))  // specifying fields from file_usage table
              $query->fields('pn', array('field_p_name_value')) // specifying fields from file_managed table
                    ->condition('nid', $node->field_ref_provider['und'][0]['target_id']);
              
              $provider_title = $query->execute()->fetchField();
              
              
              
              
              
              $replacements[$original] = $provider_title;
            }
            else {
              $replacements[$original] = check_plain($node->field_r_oprovider['und'][0]['value']);
            }

          }
          
          break;
      }
    }
  }
  
  return $replacements;
  */
}



/**
 * Implements hook_TYPE_alter().
 * 
 * Provides custom tags for the Votes API via votingapi_metadata alter (defined in ).
 */
function hr_misc_votingapi_metadata_alter(&$data) {
  $data['tags'] += array(
    'control' => array(
      'name' => CONTROL,
      'description' => 'Control Panel Interface Rating for a provider.',
    ),
    'service' => array(
      'name' => CUSTOMER,
      'description' => 'Customer Support Rating for a provider.',
    ),
    'rely' => array(
      'name' => RELY,
      'description' => 'Reliability & Uptime Rating for a provider.',
    ),
    'features' => array(
      'name' => FEATURES,
      'description' => 'Features Rating for a provider.',
    ),
    'money' => array(
      'name' => PRICE,
      'description' => 'Price Value Rating for a provider.',
    ),
    'recommend' => array(
      'name' => RECOMMEND,
      'description' => 'Value for Would you recommend this provider. Yes or No.',
    ),
    'overall' => array(
      'name' => OVERALL,
      'description' => 'Average overall value for all providers rates.',
    ),
  );
}


//function hr_misc_views_post_render(&$view, &$output, &$cache) {
//  dpm($view);
//  dpm($output);
//  $view->result[0]->link = 'xxx';
//  //$view->render();
//}

/**
 * Implements hook_views_pre_render().
 */
function hr_misc_views_pre_render(&$view) {
  
  //dpm($view);
  
  // Fix empty default sort_by parameter in url in pager for Reviews views.
  if ($view->name == 'reviews' && empty($view->exposed_data['sort_by'])) {
    $view->exposed_data['sort_by'] = 'created';
    $view->exposed_raw_input['sort_by'] = 'created';
  }
  
//  //$view->result = array();
//  foreach ($view->result as $key => $r) {
//    $view->result[$key]->created_year_month = '2006/06';
//  }
  
  
  //dpm($view->name); dpm($view->current_display);

//  global $user;
//  if ($user->uid == 1) {
//    $args = arg();
//    $term = taxonomy_term_load($args[2]);
//    dpm($term);  
//  }
    
  // Add a prefaces for the some views pages.
  $key = 'view-' . $view->name . '-' . $view->current_display;
  
  //dpm($key);
  
  $do_attahr_preface = FALSE;
  
  switch($key) {
    /*
    case 'view-providers-page_p_bu': 
      // Business Providers listing page.
    case 'view-providers-page_p_re': 
      // Residential Providers listing page.
    case 'view-reviews-page_all_reviews': 
      // Residential Providers listing page.
      
    case 'view-blog-page': 
    case 'view-blog-page_by_tag':
      
    case 'view-articles-page': 
    case 'view-articles-page_by_tag':
    
    case 'view-news-page': 
    case 'view-news-page_by_tag':
      
    case 'view-sitemap-page': 
   
    case 'view-taxonomy_term-page_by_tag':
      
      $do_attahr_preface = TRUE;
      break;
    */
      
      
    case 'view-taxonomy_term-page':
      $args = arg();
      $term = taxonomy_term_load($args[2]);
      if (isset($args[3]) || $term->vocabulary_machine_name == 'provider_features') {
        hr_misc_drupal_not_found();
        drupal_exit();
      }
      else {
        $do_attahr_preface = TRUE;
      }
      
      break;
      
      
      
    /*  
    case 'view-taxonomy_term-page_chart_providers':
    case 'view-taxonomy_term-page_teasers':
    case 'view-taxonomy_term-page_taxonomy_hide_results':
      
      $args = arg();
      $term = taxonomy_term_load($args[2]);
      //dpm($term);
      if ($term->vocabulary_machine_name == 'categories') {
        switch ($term->name) {
         case 'Features':
         case 'News':           
            //$key = 'view-taxonomy_term-page_category-features';
            //$key = 'view-taxonomy_term-page_category-news';
            $key = 'view-taxonomy_term-page_category';
            $do_attahr_preface = TRUE;
            break;
        }
      }
      elseif ($term->vocabulary_machine_name == 'features') {
        $key = 'view-taxonomy_term-page_features';
        $do_attahr_preface = TRUE;
        break;
      }
      elseif ($term->vocabulary_machine_name == 'equipment') {
        $key = 'view-taxonomy_term-page_equipment';
        $do_attahr_preface = TRUE;
        break;
      }
      elseif ($term->vocabulary_machine_name == 'protocols') {
        $key = 'view-taxonomy_term-page_protocols';
        $do_attahr_preface = TRUE;
        break;
      }
      
      break;
    */
    
    /*
    case 'view-reviews-block_all_reviews':
      
      $providers = array('' => t('- All Providers -'));
      hr_misc_getProviders($providers, 'all_including_others_from_reviews');

      if (isset($_GET['provider']) && isset($providers[$_GET['provider']])) {
        $provider_isset = TRUE;
      }
      else {
        $provider_isset = FALSE;
      }
      $url = '';
      foreach ($_GET as $key => $value) {
        if ($key == 'q' || $key == 'provider') {
          continue;
        }
        $url .= '&' . $key . '=' . urlencode($value);
      }

      $select_providers['all-reviews-select-providers'] = array(
          '#type' => 'select',
          '#title' => t('Choose a Provider'),
          '#options' => $providers,
          '#default_value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          '#value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          ////'#default_value' => 'VoIPo',
          ////'#value' => 'VoIPo',
          '#attributes' => array('id' => 'select_provider',  'onChange' => "top.location.href='http://hostingreview.org/" . $_GET['q'] . "?provider=' + encodeURIComponent(document.getElementById('select_provider').options[document.getElementById('select_provider').selectedIndex].value) + '$url'"),

      ); 
      
      $view->attachment_before = render($select_providers);
      
      break;
      */
      
      /*
    case 'view-reviews-block_all_reviews_bu':
    case 'view-reviews-block_all_reviews_re':
    case 'view-reviews-block_all_reviews_ca':
      
      $providers = array('' => t('- All Providers -'));
      $p_key = $key;
      $r_p_types = array('view-reviews-block_all_reviews_bu' => array('business', 'Business'), 
                         'view-reviews-block_all_reviews_re' => array('residential', 'Residential'),
                         'view-reviews-block_all_reviews_ca' => array(array('re_ca', 'bu_ca'), '') //'Canadian'
                        );
      hr_misc_getProviders($providers, 'all_by_service_type', $r_p_types[$p_key][0]);

      
      if (isset($_GET['provider']) && isset($providers[$_GET['provider']])) {
        $provider_isset = TRUE;
      }
      else {
        $provider_isset = FALSE;
      }
      $url = '';
      foreach ($_GET as $key => $value) {
        if ($key == 'q' || $key == 'provider') {
          continue;
        }
        $url .= '&' . $key . '=' . urlencode($value);
      }

     
      $select_providers['all-reviews-select-providers'] = array(
          '#type' => 'select',
          '#title' => t('Choose a ' . $r_p_types[$p_key][1] .' Provider'),
          '#options' => $providers,
          '#default_value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          '#value' => $provider_isset ? $providers[$_GET['provider']] : $providers[''],
          ////'#default_value' => 'VoIPo',
          ////'#value' => 'VoIPo',
          '#attributes' => array('id' => 'select_provider',  'onChange' => "top.location.href='http://hostingreview.org/" . $_GET['q'] . "?provider=' + encodeURIComponent(document.getElementById('select_provider').options[document.getElementById('select_provider').selectedIndex].value) + '$url'"),

      ); 
      
      $view->attachment_before = render($select_providers);
      
      break;
      */
  }
  
  
  if ($do_attahr_preface && $preface_node = hr_misc_getPrefaceByKey($key)) {
   
     
     
    if ($view->name . '-' . $view->current_display == 'taxonomy_term-page') {
    //elseif ($key == 'view-taxonomy_term-page_category') {
      
      global $current_tag_title;
      $current_tag_title = $preface_node->title . ' "' . htmlspecialchars_decode($view->build_info['substitutions']['%1']) . '"';
      
      // add metatag title for the specific term, if it's set in the Metatags block and not equal to defaults.
      if (isset($term->metatags['title']['value']) && $term->metatags['title']['value']) {
        $metatag_title = token_replace($term->metatags['title']['value']);
        hr_misc_addMetatag('title', $metatag_title);
        // Set the title (not only a metatag title) as well.
        $preface_node->title = htmlspecialchars_decode($metatag_title);
        $view->build_info['title'] = $preface_node->title;
      }
      else {
        //$preface_node->title = $view->get_title();//$view->build_info['title'];
        $preface_node->title .= ' "' . htmlspecialchars_decode($view->build_info['substitutions']['%1']) . '"';
        $view->build_info['title'] = $preface_node->title;
      }
      
      // add metatags for the specific term.
      
//      if (isset($term->metatags['keywords']['value']) && $term->metatags['keywords']['value']) {
//        hr_misc_addMetatag('keywords', $term->metatags['keywords']['value']);
//      }
//      else {
//        hr_misc_addMetatag('keywords', $term->name);
//      }
      
      
      if (isset($term->description) && $term->description) {
        hr_misc_addMetatag('description', $term->description);
      }
      else {
        
//        $query = db_select('taxonomy_index', 'ti');
//        $query->join('node', 'n', "n.nid = ti.nid"); 
//        $query->join('field_revision_field_a_teaser', 'tf', "tf.entity_type = 'node' AND tf.entity_id = ti.nid"); 
//        $query->fields('tf', array('field_a_teaser_value'))
//              ->orderBy('n.created', 'DESC')
//              ->condition('n.type', array('article', 'blog_post', 'news_post'), 'IN')
//              ->condition('ti.tid', $term->tid); 
//        $node_a_teaser = $query->execute()->fetchField(); 
//
//        if ($node_a_teaser) {
//          hr_misc_addMetatag('description', $preface_node->title . '. ' . drupal_substr(rtrim(strip_tags($node_a_teaser), 'Read More'), 0, 150));
//        }
        
      } // End of else of if (isset($term->description) && $term->description) {r
      
      
    } // End of if ($view->current_display == 'page_by_tag') {
     
    else 
      {
      // Change the title of the view (main page title actually)
      if (isset($preface_node->metatags['title']['value'])) {
        $view->build_info['title'] = $preface_node->metatags['title']['value'];
      }
      else{
        $view->build_info['title'] = $preface_node->title;
      }
    }
    
    
    // Show plain caption, not a link for a full node as a full node itself will be unpublished and unreachable.
    $preface_node->title_no_link = TRUE;
    // Hide the title of the preface.
    // $preface_node->title = '';
    // Works, but it's shown after exposed filters.
    $view->attachment_before = render(node_view($preface_node, 'full'));
    
//    global $user;
//    if ($user->uid == 1) {
//      $view->attachment_after = "test";
//    }
    
    // DOesn't work.
    /*
    $view->header = array(
        '#type' => 'item',
        '#markup' => '<div class="preface">' . render(node_view($preface_node)) . '</div>',
    );
    */

    
  }
   
} 


/**
 * Returns preface node by key.
 */
function hr_misc_getPrefaceByKey($key) {
    
    $preface_node = NULL;
    
    $query = db_select('node', 'n');
    $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
    $query->fields('n', array('nid'))  
          //->fields('pn', array('field_preface_key_value')) 
          ->condition('n.type', 'preface')
          ->condition('pk.field_preface_key_value', $key); 
    $preface_nid = $query->execute()->fetchField(); 
    if ($preface_nid) {
      $preface_node = node_load($preface_nid);
    }
    return $preface_node;
  }
  
  
/**
 * Returns all fees for available providers.
 */
function hr_misc_getProvidersFees($scope = 'all') {
  if ($scope == 'all') {
    $data = db_select('field_revision_field_p_fees_save', 'f')
          ->fields('f', array('entity_id', 'field_p_fees_save_value'))
          ->execute();
    foreach($data as $fee) {
      $fees[$fee->entity_id] = unserialize($fee->field_p_fees_save_value);
    }
  }
  return $fees;
}




/**
 * Creates imagecache image if it doesnt exist.
 */
function hr_misc_createCachedImageIfNotExists($relative_path, $style_name = NULL, $force_recreate = FALSE) {
  // Assure that the imagecache file is created already, or recreate it.
  $relative_path = str_replace('http://hostingreview.org/', '', $relative_path);
  
  if ($force_recreate || !file_exists($relative_path)) {
    
    
    // Find out the style name from 'f/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    if (!$style_name) {
      $path_part = explode('/styles/', $relative_path);
      $path_part = explode('/public/', $path_part[1]);
      $style_name = $path_part[0];
    }
    $style = image_style_load($style_name);
    //$styled_file_path = 'sites/default/files/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    //$original_file_path = 'sites/default/files/p/logos/Nextiva-Logo.png';
    $file_path = str_replace('styles/' . $style_name . '/public/', '', $relative_path);
    $source = hr_misc_getStreamUriFromRelativePath($file_path);
    $destination = image_style_path($style_name, $source);
    if (!image_style_create_derivative($style, $source, $destination)) {
      return FALSE;
    }
    
    return 'updated';
  }
  
  return TRUE;
}


/**
 * Loads an image object from a file.
 *
 */
function hr_misc_loadImage($imgname, $type = null) {

    if(!$type)
    {
        $type = explode('.', $imgname);
        $type = $type[count($type)-1];
    }

    switch(strtolower($type))
    {

        case 'png':
            $im = @imagecreatefrompng($imgname);
            break;

        case 'jpg':
        case 'jpeg':
            $im = @imagecreatefromjpeg($imgname);
            break;
          
        case 'gif':
            $im = @imagecreatefromgif($imgname);
            break;
       
       default:
         $im = NULL;
    }

    if(!$im)
    {
        /*

        // an image with error message

        $im= imagecreate (150, 30);
        $bgc = imagecolorallocate ($im, 255, 255, 255);
        $tc= imagecolorallocate ($im, 0, 0, 0);
        imagefilledrectangle ($im, 0, 0, 150, 30, $bgc);
        imagestring ($im, 1, 5, 5, "Error loading $imgname", $tc);

        */
    }

    return $im;
}



/**
 * 
 * Try to optimize an image with applications installed on the server.
 * 
 * Depends on the imageapi_optimize module.
 * 
 */
function hr_misc_imageOptimizeOnServer($file) {
  // Code example from the image_optimize.module
  $dst = drupal_realpath($file['uri']);
  //dpm($dst);
  //return;
  
  //hr_misc_sendMessage('new_file_was_uploaded', array('report' => 'dst: ' . $dst));
  
  switch ($file['filemime']) {
    case 'image/png':
//      $cmd = variable_get('imageapi_optimize_optipng', '');
//      dpm('imageapi_optimize_optipng = ' . $cmd);
//      $cmd = variable_get('imageapi_optimize_pngcrush', '');
//      dpm('imageapi_optimize_pngcrush = ' . $cmd);
//      $cmd = variable_get('imageapi_optimize_advpng', '');
//      dpm('imageapi_optimize_advpng = ' . $cmd);
//      break;
      
      if ($cmd = variable_get('imageapi_optimize_optipng', '')) { // /usr/bin/optipng, should be installed in system
        exec("$cmd -o5 -quiet ". escapeshellarg($dst));
      }
      if ($cmd = variable_get('imageapi_optimize_pngcrush', '')) {
        $temp = drupal_realpath(drupal_tempnam('temporary://', 'file'));
        exec("$cmd -rem alla -reduce -brute -q ". escapeshellarg($dst) ." ". escapeshellarg($temp) ." && mv ". escapeshellarg($temp) ." ". escapeshellarg($dst));
      }
      if ($cmd = variable_get('imageapi_optimize_advpng', '')) {
        exec("$cmd -z4q ". escapeshellarg($dst), $return, $output);
      }
      break;

    case 'image/jpeg':
      if ($cmd = variable_get('imageapi_optimize_jpegtran', '')) { // /usr/bin/jpegtran, should be installed in system
        _imageapi_optimize_exec("$cmd -copy none -optimize -progressive ". escapeshellarg($dst), $dst);
      }
      if ($cmd = variable_get('imageapi_optimize_jfifremove', '')) {
        _imageapi_optimize_exec("$cmd < ". escapeshellarg($dst), $dst);
      }
      break;
  }

}


/**
 * Return sprite image with link for a provider from certain sprite by nid.
 */
function hr_misc_getProviderLogoFromSprite($nid, $sprite_name, $all_data_quick = NULL, $out_sprite_ext = NULL) {

  if (!$out_sprite_ext) {
    //$out_sprite_ext = 'png';
    $out_sprite_ext = 'jpg';
  }
  
  $hr_providers_sprites = variable_get('hr_providers_sprites');
  if (isset($hr_providers_sprites[$sprite_name]['data'][$nid])) {
    $out_sprite_path = 'f/p/';
    if (!$all_data_quick) {
      $all_data_quick = hr_misc_getProvidersDataQuick();
    }
    //dpm($hr_providers_sprites[$sprite_name]['data'][$nid]);
    
    if ($hr_providers_sprites[$sprite_name]['data'][$nid]['h'] < 45) {
      //return '<div style="width: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $hr_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div><div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.' . $out_sprite_ext . '?' . $hr_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $hr_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div><div style="width: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $hr_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px"></div>';
      return '<div style="width: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $hr_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px">
              </div>
              <div style="margin: auto; width: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" 
                //. $out_sprite_path . $sprite_name . '.' . $out_sprite_ext . '?' . $hr_providers_sprites[$sprite_name]['time'] 
                . $out_sprite_path . $sprite_name . '_' . $hr_providers_sprites[$sprite_name]['time'] . '.' . $out_sprite_ext 
                . "')" . ' no-repeat 0 -' . $hr_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;">
              </div>
              <div style="width: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . (45 - $hr_providers_sprites[$sprite_name]['data'][$nid]['h'])/2 . 'px">
              </div>';
    }
    else 
      {
      //return '<div title="' . $all_data_quick[$nid]['name'] . ' site" style="margin: auto; width: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" . $out_sprite_path . $sprite_name . '.' . $out_sprite_ext . '?' . $hr_providers_sprites[$sprite_name]['time'] . "')" . ' no-repeat 0 -' . $hr_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;"></div>';
      return '<div style="margin: auto; width: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['w'] . 'px; height: ' . $hr_providers_sprites[$sprite_name]['data'][$nid]['h'] . 'px; background: url('. "'/" 
                //. $out_sprite_path . $sprite_name . '.' . $out_sprite_ext . '?' . $hr_providers_sprites[$sprite_name]['time'] 
                . $out_sprite_path . $sprite_name . '_' . $hr_providers_sprites[$sprite_name]['time'] . '.' . $out_sprite_ext
                . "')" . ' no-repeat 0 -' . $hr_providers_sprites[$sprite_name]['data'][$nid]['y'] . 'px transparent;">
              </div>';
    }
    
  }
  return NULL;
}        



/**
 * Implementation of hook_file_insert().
 * 
 * Try to optimize images on upload.
 * 
 */
function hr_misc_file_insert($file) {
  
  //$file_data = print_r($file, TRUE);
  //hr_misc_sendMessage('new_file_was_uploaded', array('report' => $file_data));
  
  // Write to log.file
  //exec('echo "$(date ' . "'+%Y-%m-%d %H:%M:%S'" . ') ---->UPLOAD--->'. escapeshellarg($file->uri) . '" >>~/hr_image_optimize.log');
  
  // Settings on this page http://hostingreview.org/admin/config/media/image-toolkit
  /*
  /usr/local/bin/advpng
  /usr/bin/optipng
  /usr/bin/pngcrush
  
  /usr/bin/jpegtran
  /usr/local/bin/jfifremove
  */
  
//  global $user;
//  if ($user->uid != 1) {
//    return;
//  }
  
  
  hr_misc_imageOptimizeOnServer(array('uri' => $file->uri, 'filemime' => $file->filemime));
  
  /*
  // Code example from the image_optimize.module
  $dst = drupal_realpath($file->uri);
  //hr_misc_sendMessage('new_file_was_uploaded', array('report' => 'dst: ' . $dst));
  
  switch ($file->filemime) {
    case 'image/png':
      if ($cmd = variable_get('imageapi_optimize_optipng', '')) { // /usr/bin/optipng, should be installed in system
        exec("$cmd -o5 -quiet ". escapeshellarg($dst));
      }
      if ($cmd = variable_get('imageapi_optimize_pngcrush', '')) {
        $temp = drupal_realpath(drupal_tempnam('temporary://', 'file'));
        exec("$cmd -rem alla -reduce -brute -q ". escapeshellarg($dst) ." ". escapeshellarg($temp) ." && mv ". escapeshellarg($temp) ." ". escapeshellarg($dst));
      }
      if ($cmd = variable_get('imageapi_optimize_advpng', '')) {
        exec("$cmd -z4q ". escapeshellarg($dst), $return, $output);
      }
      break;

    case 'image/jpeg':
      if ($cmd = variable_get('imageapi_optimize_jpegtran', '')) { // /usr/bin/jpegtran, should be installed in system
        _imageapi_optimize_exec("$cmd -copy none -optimize -progressive ". escapeshellarg($dst), $dst);
      }
      if ($cmd = variable_get('imageapi_optimize_jfifremove', '')) {
        _imageapi_optimize_exec("$cmd < ". escapeshellarg($dst), $dst);
      }
      break;
  }
  */
  
  
}


/**
 * Rebuilds providers logos sprites.
 */
function hr_misc_rebuildProvidersLogosSprites($listing_pos_fields = NULL, $all_data_quick = NULL) {
  
  $providers_logos_sprites = array(
    //'home_top_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_business_cmp', 'block_1'), 'listing_pos_fields' => array('field_p_erating', 'field_p_erating_residential')),
    
    'home_top_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_h_top_sh_table'), 'listing_pos_fields' => array('field_p_listposition_sh')),
      
    'top_webhost_small_block' => array('image_style' => 'article_thumbnail_side_block', 'providers_views_displays' => array('block_topwhost_small'), 'listing_pos_fields' => array('field_p_listposition_sh')),
  
      
    'top_sh_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_sh_p_table'), 'listing_pos_fields' => array('field_p_listposition_sh')),
      
    'top_wp_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_wp_p_table'), 'listing_pos_fields' => array('field_p_listposition_wp')),
      
    'top_cp_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_cp_p_table'), 'listing_pos_fields' => array('field_p_listposition_cp')),
      
    'top_vps_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_vps_p_table'), 'listing_pos_fields' => array('field_p_listposition_vps')),
      
    'top_wb_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_wb_p_table'), 'listing_pos_fields' => array('field_p_listposition_wb')),
      
    'top_ca_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_ca_p_table'), 'listing_pos_fields' => array('field_p_listposition_ca')),
      
    'top_ds_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_ds_p_table'), 'listing_pos_fields' => array('field_p_listposition_ds')),
      
    'top_ch_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_ch_p_table'), 'listing_pos_fields' => array('field_p_listposition_ch')),
      
      
      
      
     /* 
    'top_bu_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_bu_page', 'block_p_bu_page_cmp'), 'listing_pos_fields' => array('field_p_erating')),
    
    'top_re_providers' => array('image_style' => 'logo_provider_vertical_chart', 'providers_views_displays' => array('block_p_re_page'), 'listing_pos_fields' => array('field_p_erating_residential')),
    'top_re_providers_chart_big' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_re_page'), 'listing_pos_fields' => array('field_p_erating_residential')),   
    
    'top_bu_providers_rev' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('bl_p_bu_rev_page_cmp'), 'listing_pos_fields' => array('field_p_erating')),
    'top_re_providers_rev' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('bl_p_re_rev_page'), 'listing_pos_fields' => array('field_p_erating_residential')),
    
      
    'top_pbx_providers' => array('image_style' => 'logo_provider_vertical_chart', 'providers_views_displays' => array('block_p_pbx_page', 'block_p_pbx_page_cmp'), 'listing_pos_fields' => array('field_p_erating_pbx')),
   
    'top_sip_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_sip_page'), 'listing_pos_fields' => array('field_p_erating_sip')),
    
    'top_ifa_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_p_ifa_page'), 'listing_pos_fields' => array('field_p_erating_ifa')),
      
    'top_ca_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_p_bu_ca_page', 'block_p_bu_ca_page_cmp', 'block_p_re_ca_page'), 'listing_pos_fields' => array('field_p_erating_bu_ca', 'field_p_erating_re_ca')),
      
    'all_reviews_providers' => array('image_style' => 'logo_provider_chart_big', 'providers_views_displays' => array('block_top_bu_ar', 'block_top_bu_ar_cmp', 'block_top_re_ar'), 'listing_pos_fields' => array('field_p_erating', 'field_p_erating_residential')), 
    */
  );
  
  // Skip refreshing sprites without selected listing fields.
  if($listing_pos_fields && $hr_providers_sprites = variable_get('hr_providers_sprites')) {
    foreach ($providers_logos_sprites as $providers_logos_sprite_title => $providers_logos_sprite_data) {
      $in_array = FALSE;
      foreach($listing_pos_fields as $listing_pos_field) {
        if (in_array($listing_pos_field, $providers_logos_sprite_data['listing_pos_fields'])) {
          $in_array = TRUE;
        }
      }
      if (!$in_array) {
        unset($providers_logos_sprites[$providers_logos_sprite_title]);
      }
    }
  }
  else {
    $hr_providers_sprites = array();
  }
  
  //cache_clear_all('*', 'cache_views', TRUE);
  cache_clear_all('*', 'cache_views_data', TRUE);
  
  if (!$all_data_quick) {
    $all_data_quick = hr_misc_getProvidersDataQuick();
  }
  
  //$image_style_name = 'logo_provider_chart_main';
  
  foreach ($providers_logos_sprites as $providers_logos_sprite_name => $providers_logos_sprite) {
    
    // Decrease width of images for vertical charts pages.
//    if ($providers_logos_sprite_name == 'top_bu_providers') {
//      $image_style_name = 'logo_provider_vertical_chart';
//      dpm('new style used');
//    }
    
    $image_style_name = $providers_logos_sprite['image_style'];
    //dpm($providers_logos_sprite_name . ' => ' . $image_style_name);
    
    foreach ($providers_logos_sprite['providers_views_displays'] as $providers_views_display) {
      
      $view = views_get_view('providers');
      $view->execute($providers_views_display);
      
      if ($view->result) {
        
        foreach ($view->result as $provider) {
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['name'] = $all_data_quick[$provider->nid]['name'];
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src'] = preg_replace('|^(.*)\?(.*)$|', '$1', str_replace('http://hostingreview.org/', '', image_style_url($image_style_name, $all_data_quick[$provider->nid]['i_logo_uri'])));
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src'] = urldecode($input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']); //str_replace('%20', ' ', $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']);
                  
          // Assure that the imagecache file is created already, or recreate it.
          hr_misc_createCachedImageIfNotExists($input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_src']);
          
          $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_html'] = theme('hr_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$provider->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$provider->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$provider->nid]['i_logo_title'] ));
          
          //$out .= $input_providers_data[$providers_logos_sprite_name][$provider->nid]['themed_image_html'];
        }
        
      }
      
    }
    
  }
  
  
  $out_sprite_path = 'f/p/';
  //$out_sprite_ext = 'png';
  $out_sprite_ext = 'jpg';
  
  $time =  time();
  
  $sprites_generated = 0;
  
  foreach ($input_providers_data as $providers_logos_sprite_name => $providers_logos_sprite) {
    
    $out_sprite['file'] = $out_sprite_path . $providers_logos_sprite_name . '.' . $out_sprite_ext;
    $out_sprite['uri'] = 'public://p/' . $providers_logos_sprite_name . '.' . $out_sprite_ext;
    
    $out_sprite['file_timed'] = $out_sprite_path . $providers_logos_sprite_name . '_' . $time  . '.' . $out_sprite_ext;
    $out_sprite['uri_timed'] = 'public://p/' . $providers_logos_sprite_name . '_' . $time . '.' . $out_sprite_ext;
    
    
    $out_size = array();
    
    foreach ($providers_logos_sprite as $nid => $provider) {

      if($input_image['info'] = getimagesize($provider['themed_image_src'])) {
        // Set a height (all providers logos height + 10px between each others).
        if (empty($out_size['h'])) {
          $out_size['h'] = $input_image['info'][1];
        }
        else {
          $out_size['h'] += 10 + $input_image['info'][1];
        }
        // Set once a width of the sprite by the widest one.
        if (empty($out_size['w']) || $out_size['w'] < $input_image['info'][0]) {
          $out_size['w'] = $input_image['info'][0];
        }
      }
    }
    
    $out_sprite['img'] = imagecreatetruecolor($out_size['w'], $out_size['h']);
  
    // Make the background transparent.
    $white = imagecolorallocate($out_sprite['img'], 255, 255, 255);
    $transparent = imagecolortransparent($out_sprite['img'],$white);

    // Set transparency for the output image.
    imagefilledrectangle($out_sprite['img'], 0, 0, $out_size['w'], $out_size['h'], $transparent);
  
    $current_y = 0;
    
    // Reset the sprite data to avoid remaining the old data. 
    $hr_providers_sprites[$providers_logos_sprite_name] = array();
    
    foreach ($providers_logos_sprite as $nid => $provider) {
      if ($input_image['img'] = hr_misc_loadImage($provider['themed_image_src'])) {
        //$input_image['info'] = getimagesize(str_replace('%20', ' ', $provider['themed_image_src']));
        $input_image['info'] = getimagesize(urldecode($provider['themed_image_src']));
        imagecopy($out_sprite['img'], $input_image['img'], 0, $current_y, 0, 0, $input_image['info'][0], $input_image['info'][1]);
        
        $hr_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['y'] = $current_y;
        $hr_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['w'] = $input_image['info'][0];
        $hr_providers_sprites[$providers_logos_sprite_name]['data'][$nid]['h'] = $input_image['info'][1];
        $hr_providers_sprites[$providers_logos_sprite_name]['time'] =  $time;
        
        $current_y += 10 + $input_image['info'][1];
      }
    }
    
    
  
  
    // Save a new sprite file and optimize it.
    switch ($out_sprite_ext) {
      case 'png':
        //imagepng($out_sprite['img'], $out_sprite['file']);
        imagepng($out_sprite['img'], $out_sprite['file_timed']);
        //imagepng($out_sprite['img'], $out_sprite['file']);
        $filemime = 'image/png';
        break;
      
      case 'jpg':
        //imagejpeg($out_sprite['img'], $out_sprite['file']);
        imagejpeg($out_sprite['img'], $out_sprite['file_timed']);
        //imagejpeg($out_sprite['img'], $out_sprite['file']);
        $filemime = 'image/jpeg';
        break;
    }
    
    // Optimize the image.
    //hr_misc_imageOptimizeOnServer(array('uri' => $out_sprite['uri'], 'filemime' => $filemime));
    ////hr_misc_imageOptimizeOnServer(array('uri' => $out_sprite['uri_timed'], 'filemime' => $filemime));

    // Show image.
    //Header("Content-type: image/png");
    //imagepng($out_sprite['img'], NULL, 0);
    
    ++$sprites_generated;
  } // End of foreach ($input_providers_data as $providers_logos_sprite_name => $providers_logos_sprite) {
  
   //dpm('xxx4');
    
  //dpm($hr_providers_sprites);
  //dpm($input_providers_data);
  
  variable_set('hr_providers_sprites', $hr_providers_sprites);
  watchdog("Sprites Regenerating", "$sprites_generated providers sprites have been Regenerated", NULL, WATCHDOG_WARNING);
  
  //drupal_flush_all_caches();
  // Not so hard clearing.
  views_invalidate_cache();
  cache_clear_all('*', 'cache_views_data', TRUE);
  
  drupal_set_message("Cache is flushed after $sprites_generated prividers logos sprites regenerating.", 'warning');
  
  if (!$listing_pos_fields) {
    drupal_set_message("All $sprites_generated providers logos sprites have been regenerated!");
    drupal_goto();
  }
  
}



/**
 * Returns all quick data for available providers.
 */
function hr_misc_getProvidersDataQuick($scope = 'all', $reset = FALSE, $clear_from_session = FALSE, $p_nid_to_reset = NULL) {
    
  static $var_p_all_data_quick;
  static $request_counter;
  
  
  if (!$var_p_all_data_quick && !$reset && !$clear_from_session) {
    $var_p_all_data_quick = variable_get('p_all_data_quick');
    //dpm('used from var');
    $request_counter = 0;
  }
  else {
    $request_counter++;
    //dpm('used from static');
    //dpm('$request_counter = ' . $request_counter);
  }
  
  
  if ($p_nid_to_reset) {
    if (!empty($var_p_all_data_quick)) {
      
      
      $query = db_select('field_revision_field_p_data_quick', 'f')
            ->fields('f', array('entity_id', 'field_p_data_quick_value'));
      $query->condition('f.entity_id', $p_nid_to_reset);
      $provider = $query->execute()->fetchObject();
      $var_p_all_data_quick[$p_nid_to_reset] = unserialize($provider->field_p_data_quick_value);
      
      $query = db_select('url_alias', 'a')
          ->fields('a', array('alias'));
      $query->condition('a.source', 'node/' . $p_nid_to_reset);

      $var_p_all_data_quick[$p_nid_to_reset]['subpath'] = '/' . $query->execute()->fetchField();

      $var_p_all_data_quick['timestamp'] = time();
      //$_SESSION['p_all_data_quick'] = $p_data_quick;
      variable_set('p_all_data_quick', $var_p_all_data_quick);
      
      drupal_set_message('Quick data for this provider has been reset.', 'warning');
      //dpm($var_p_all_data_quick);
      
      return NULL;
    }
    else {
      $reset = TRUE;
    }
  }
  
  //if ($clear_from_session && isset($_SESSION['p_all_data_quick'])) {
  if ($clear_from_session && $var_p_all_data_quick) {
    // Reset a helper session var with all quick data.
    //unset($_SESSION['p_all_data_quick']);
    variable_set('p_all_data_quick', NULL);
    $var_p_all_data_quick = NULL;
  }
  
  /*
  if ($clear_from_session && isset($_SESSION['p_all_data_quick'])) {
    // Reset a helper session var with all quick data.
    unset($_SESSION['p_all_data_quick']);
  }
  */
  
  $p_data_quick = array();
  if ($scope == 'all') {
    // If data is not in the Session or its age more than 5 hours, reset it.
    
    //if(!$reset && !empty($_SESSION['p_all_data_quick'])) {
    if(!$reset && $var_p_all_data_quick) {
      //$p_data_quick = $_SESSION['p_all_data_quick'];
      $p_data_quick = $var_p_all_data_quick;
    }
    else {
      $p_data_quick = NULL;
    }
        
    
    if ($reset || !$p_data_quick /*|| time() > ($p_data_quick['timestamp'] + 18000)*/ ) {
      $data = db_select('field_revision_field_p_data_quick', 'f')
            ->fields('f', array('entity_id', 'field_p_data_quick_value'))
            ->execute();
      foreach($data as $value) {
        $p_data_quick[$value->entity_id] = unserialize($value->field_p_data_quick_value);
        
        $query = db_select('url_alias', 'a')
          ->fields('a', array('alias'));
        $query->condition('a.source', 'node/' . $value->entity_id);
        
        $p_data_quick[$value->entity_id]['subpath'] = '/' . $query->execute()->fetchField();
        
      }

      //dpm($p_data_quick);
      
      $p_data_quick['timestamp'] = time();
      //$_SESSION['p_all_data_quick'] = $p_data_quick;
      variable_set('p_all_data_quick', $p_data_quick);
      $var_p_all_data_quick = $p_data_quick;
      
      //dpm($var_p_all_data_quick);
    }
  }
  
  
  return $p_data_quick;  
}
 


/**
 * Return specific variable value from p_data_quick for a provider depending on the filter value (business OR residential, etc)
 */
function hr_misc_getProviderQuickData($target, $data) {
  
  $out = '';
  global $user;
  
  static $all_data_quick;
  if (!$all_data_quick) {
    $all_data_quick = hr_misc_getProvidersDataQuick();
  }
  
  switch($target) {
    
    case 'details':
      
      $details = NULL;
      
      if (empty($all_data_quick[$data['data']->nid]['details']) && $user->uid == 1) {

        $query = db_select('field_data_body', 'b')
          ->fields('b', array('body_value'));
        $query->condition('b.entity_id', $data['data']->nid);
        $body = $query->execute()->fetchField();


        if ($body) {
            $details = trim(drupal_substr(strip_tags($body), 0, 200));  
            
            $last_pos = strrpos($details, ' ');
            $details = substr_replace ($details, '... ', $last_pos);
            $details .= l('Read More', 'node/' . $data['data']->nid, array('attributes' => array('class' => array('more'))));
        }
        else {
          $details = l('Read a Review', 'node/' . $data['data']->nid, array('attributes' => array('class' => array('more'))));
        }
        
        $all_data_quick[$data['data']->nid]['details'] = $details;

        db_update('field_data_field_p_data_quick')
          ->fields(array(
            'field_p_data_quick_value' => serialize($all_data_quick[$data['data']->nid]),
          ))
          ->condition('entity_id', $data['data']->nid)
          ->execute();

        db_update('field_revision_field_p_data_quick')
          ->fields(array(
            'field_p_data_quick_value' => serialize($all_data_quick[$data['data']->nid]),
          ))
          ->condition('entity_id', $data['data']->nid)
          ->execute();

      }
      else {
        $details = @$all_data_quick[$data['data']->nid]['details'];
      }
      
      return $details;
      
    
      
      
      
      
    
    case 'coupon_offers':
      
      if (!empty($all_data_quick[$data['data']->nid]['coupon']['link'])) {
        $link = $all_data_quick[$data['data']->nid]['coupon']['link'];
      }
      elseif (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
        $absolute = TRUE;
      }
      else {
        $link = url('node/' . $data['data']->nid);
        $absolute = FALSE;
      }
      
      return !empty($all_data_quick[$data['data']->nid]['coupon']['offers']) ? l($all_data_quick[$data['data']->nid]['coupon']['offers'], $link, array('absolute' => $absolute)) : '';
      
    
      
      
      
      
      
    case 'best_deal':
      
      return !empty($all_data_quick[$data['data']->nid]['best_deal']) ? $all_data_quick[$data['data']->nid]['best_deal'] : '';
    
     
      
      
      
      
    case 'offers':
      
      if (!empty($all_data_quick[$data['data']->nid]['offers'])) {
//        foreach ($all_data_quick[$data['data']->nid]['offers'] as $offer) {
//          $out .= '<div class="offer">' . $offer . '</div>';
//        }
        $out = '<div class="offer">' . $all_data_quick[$data['data']->nid]['offers'] . '</div>';
      }
      
      return $out;
     
      
      
      
      
      
      
    case 'logo_chart':
    case 'logo_article':
    case 'logo_chart_iframe':
    case 'logo_small_block':
    
      //dpm(@$data['view_display']);
      //return $all_data_quick[$data['data']->nid]['name'];
       
      // Render a logo from sprite.
      
    /*
      'home_top_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_h_top_sh_table'), 'listing_pos_fields' => array('field_p_listposition_sh')),
      'top_webhost_small_block' => array('image_style' => 'article_thumbnail_side_block', 'providers_views_displays' => array('block_topwhost_small'), 'listing_pos_fields' => array('field_p_listposition_sh')),
      'top_sh_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_sh_p_table'), 'listing_pos_fields' => array('field_p_listposition_sh')),
      'top_wp_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_wp_p_table'), 'listing_pos_fields' => array('field_p_listposition_wp')),
      'top_vps_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_vps_p_table'), 'listing_pos_fields' => array('field_p_listposition_vps')), 
      'top_wb_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_wb_p_table'), 'listing_pos_fields' => array('field_p_listposition_wb')),
      'top_ca_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_ca_p_table'), 'listing_pos_fields' => array('field_p_listposition_ca')),
      'top_ds_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_ds_p_table'), 'listing_pos_fields' => array('field_p_listposition_ds')),
      'top_ch_providers' => array('image_style' => 'logo_provider_chart_main', 'providers_views_displays' => array('block_top_ch_p_table'), 'listing_pos_fields' => array('field_p_listposition_ch')),
    */
              
      $display_to_sprite = array(
        'block_h_top_sh_table' => 'home_top_providers',
        'block_topwhost_small' => 'top_webhost_small_block',
        'block_top_sh_p_table' => 'top_sh_providers',
        'block_top_wp_p_table' => 'top_wp_providers',
        'block_top_cp_p_table' => 'top_cp_providers',
        'block_top_vps_p_table' => 'top_vps_providers',

        'block_top_wb_p_table' => 'top_wb_providers',
        'block_top_ca_p_table' => 'top_ca_providers',
        'block_top_ds_p_table' => 'top_ds_providers',
        'block_top_ch_p_table' => 'top_ch_providers',
      );
      
      /*
      $url_to_sprite = array( '/' => 'home_top_providers', 
                              
                              '/reviews' => 'all_reviews_providers', 
          
                              '/business' => 'top_bu_providers', 
                              
                              '/get/iframe/business-voip-chart' => 'top_bu_providers', 
          
                              '/business-voip-reviews' => 'top_bu_providers', 
                              '/reviews/business' => 'top_bu_providers_rev', 
          
                              '/speed-test-tool' => 'top_bu_providers', 
          
                              '/hosted-pbx' => 'top_pbx_providers', 

                              '/sip-trunking' => 'top_sip_providers',

                              '/fax' => 'top_ifa_providers',

                              '/canada' => 'top_ca_providers',

                              '/residential' => 'top_re_providers', 
                              
                              '/residential-voip-reviews' => 'top_re_providers',
                              '/reviews/residential' => 'top_re_providers_rev',
                            );

      $current_url = $_SERVER['REQUEST_URI'];
      
      if (isset($url_to_sprite[$current_url]) || $_GET['q'] == 'home') {
      
        if ($_GET['q'] == 'home') {
          $sprite_name = 'home_top_providers';
        }
        else {
          $sprite_name = $url_to_sprite[$current_url];
        }

        
        if ($p_image = hr_misc_getProviderLogoFromSprite($data['data']->nid, $sprite_name, $all_data_quick)) {
          return hr_misc_getTrackingUrl($p_image, NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
        }
      
      }
      */
      
      
      
      // Get a logo from a sprite.
      
      if (isset($data['view_display']) && isset($display_to_sprite[$data['view_display']])) {
      
        if ($p_image = hr_misc_getProviderLogoFromSprite($data['data']->nid, $display_to_sprite[$data['view_display']], $all_data_quick)) {
          $out = hr_misc_getTrackingUrl($p_image, NULL, $data['data']->nid, NULL, NULL, NULL, $all_data_quick[$data['data']->nid], @$data['service_type']);
        }
      
      }
      
      
      if (!$out) {
      
          if (!empty($all_data_quick[$data['data']->nid]['i_logo_uri'])) {

            if ($target == 'logo_chart') {
              $image_style_name = 'logo_provider_chart_main';
            } 
            elseif ($target == 'logo_chart_iframe') {
              $image_style_name = 'logo_provider_chart_iframe';
            }
            elseif ($target == 'logo_article') {
              $image_style_name = 'thumbnail';
            }
            elseif ($target == 'logo_small_block') {
              $image_style_name = 'article_thumbnail_side_block';
            }

            $image = theme('hr_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));

    //        if ($data['data']->nid == 88 && $user->hostname == '109.171.109.18') { // 88 - hostgator
    //           dpm($all_data_quick[$data['data']->nid]);
    //        }


            $out = hr_misc_getTrackingUrl($image, $all_data_quick[$data['data']->nid]['subpath'], $data['data']->nid, NULL, NULL, @$data['service_type']);
            //$out .= hr_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', @$data['service_type']);
          }
          else {
            if (!empty($all_data_quick[$data['data']->nid]['name'])) {
              //$out = hr_misc_getTrackingUrl($all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, NULL, @$data['service_type']);
              $out = hr_misc_getTrackingUrl($all_data_quick[$data['data']->nid]['name'], $all_data_quick[$data['data']->nid]['subpath'], $data['data']->nid, NULL, NULL, @$data['service_type']);

            }
    //        else {
    //          $out = '<a href="' . $link . '" target="_blank">' . $data['data']->node_title . '</a>';
    //        }
          }

      }

      
      
      if ($target == 'logo_chart') {
        
        if (!empty($data['service_type']) && !empty($all_data_quick[$data['data']->nid][$data['service_type']]['fees']['monthly-crossed']) && strpos($all_data_quick[$data['data']->nid][$data['service_type']]['fees']['monthly-crossed'], '-') !== 0) {
          $out .= hr_misc_getTrackingUrl('<div class="limited-time">LIMITED TIME</div>', $all_data_quick[$data['data']->nid]['subpath'], $data['data']->nid, NULL, NULL, @$data['service_type']);
        }
        
//        global $user;
//        if ($user->uid) 
        {
          $out .= hr_misc_getTrackingUrl('Visit ' . $all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, 'company visit-site-link', @$data['service_type']);
        }
        
      } 
      // Add stars
//      elseif ($target == 'logo_small_block' && !empty($data['data']->votingapi_cache_node_percent_overall_average_value)) {
//          $out .= '<div class="rating">' . theme('hr_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css'))) . '</div>';
//      }
      
      
      /*
      if (!empty($all_data_quick[$data['data']->nid]['name'])) {
        //$out .= '<div class="link"><a href="' . $link . '" target="_blank">Visit website</a></div>';
        
        /////$out .= '<div class="link"><a href="/click?p=' . urlencode($all_data_quick[$data['data']->nid]['name']) . '" rel="nofollow" target="_blank">Visit website</a></div>';
        
        $out .= '<div class="link">' . hr_misc_getTrackingUrl('Visit website', NULL, $data['data']->nid) . '</div>';
      }
      */
      
      return $out;


      
      
    
      
      
    case 'name_n_logo_chart':
          
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      
      if (!empty($all_data_quick[$data['data']->nid]['i_logo_uri'])) {
        
        $image_style_name = 'logo_provider_chart_main';

        $image = theme('hr_misc_image_style', array('style_name' => $image_style_name, 'path' => $all_data_quick[$data['data']->nid]['i_logo_uri'], 'alt' =>  $all_data_quick[$data['data']->nid]['i_logo_alt'], 'title' =>  $all_data_quick[$data['data']->nid]['i_logo_title'] ));
        
        ////$out = '<a href="' . $link . '" target="_blank">' . $image . '</a>';
        
        ///////$out = '<a href="/click?p=' . urlencode($all_data_quick[$data['data']->nid]['name']) . '" rel="nofollow" target="_blank">' . $image . '</a>';

        $out = hr_misc_getTrackingUrl($image, NULL, $data['data']->nid);
      }

      //$out .= '<a href="' . $link . '" target="_blank">' . @$all_data_quick[$data['data']->nid]['name'] . '</a>';
      if (!empty($all_data_quick[$data['data']->nid]['name'])) {
        //$out .= '<div class="link"><a href="' . $link . '" target="_blank">Visit website</a></div>';
        
        /////$out .= '<a href="/click?p=' . urlencode($all_data_quick[$data['data']->nid]['name']) . '" rel="nofollow" target="_blank">' . @$all_data_quick[$data['data']->nid]['name'] . '</a>';
        
        $out .= hr_misc_getTrackingUrl(@$all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid);
      }
                
      return $out;
    
   
     
      
      
      
      
      
    case 'name_n_stars':
      
      $out = '<div class="name">' . $all_data_quick[$data['data']->nid]['name'] . '</div>';
      // Add stars
      if (!empty($data['data']->votingapi_cache_node_percent_overall_average_value)) {
          $out .= '<div class="rating">' . theme('hr_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css'))) . '</div>';
      }
      return $out;
      
      
      
      
      
      
      
    case 'site_link':
      
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $out = hr_misc_getTrackingUrl('Visit site', NULL, $data['data']->nid, NULL, 'site-link');
        //$out = hr_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'site-link');
      }
      
      return $out;
    
      
      
      
      
      
      
      
    case 'review_and_site_links':
      
      
      /*
      if (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $link = $all_data_quick[$data['data']->nid]['i_web'];
      }
      else {
        $link = url('node/' . $data['data']->nid);
      }
      */
      
      if (!empty($all_data_quick[$data['data']->nid][$data['service_type']]['s-url'])) {
        $out .= hr_misc_getTrackingUrl('Visit site', NULL, $data['data']->nid, NULL, 'site-link', @$data['service_type']);
      }
      elseif (!empty($all_data_quick[$data['data']->nid]['i_web'])) {
        $out .= hr_misc_getTrackingUrl('Visit site', NULL, $data['data']->nid, NULL, 'site-link');
      }
      
      $out = '<a class="review-link" href="' . url('node/' . $data['data']->nid) . '">Read Review</a>' . $out;
      
      return $out;
      
    
      
      
      
      
      
    case 'i_mbg':

      $out = @$all_data_quick[$data['data']->nid][$target];
      
      return $out;
      
      
      
      
      
      
      
    case 'sp': // space
    case 'bw': // bandwidth
      
      $out = isset($all_data_quick[$data['data']->nid][$data['service_type']][$target]) ? $all_data_quick[$data['data']->nid][$data['service_type']][$target] : '';
      
      return $out;
      
      
      
      
      
      
    case 'features':
      
      $plan_title = isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      $features = isset($all_data_quick[$data['data']->nid][$data['service_type']]['feat']) ?  $all_data_quick[$data['data']->nid][$data['service_type']]['feat'] : '';

      if ($plan_title) {
        $out .= '<div class="plan">' . $plan_title . '</div>';
      }
      if (!empty($features)) {
        foreach($features as $tid => $term) {
          $out .= '<div class="feature">' . $term . '</div>';
        }
      }
      
      return $out; // $all_data_quick[$data['data']->nid][$target];
      
    
    
      
      
      
      
    case 'grade':
      
      if (isset($data['data']->votingapi_cache_node_percent_overall_average_value) && $data['data']->votingapi_cache_node_percent_overall_average_value) {
        $out = hr_misc_getProviderGradeFromRating($data['data']->votingapi_cache_node_percent_overall_average_value);
      }
      
      return $out;

      
      
      
      
      
    case 'erating':
          
      if (!empty($all_data_quick[$data['data']->nid]['erating'])) {
        $out = theme('hr_misc_fivestar_static', array('rating' => $all_data_quick[$data['data']->nid]['erating'], 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css')));
      }
      
      $out .= '<div class="link">' . l('Read review Р В Р’В Р Р†Р вЂљРІвЂћСћР В РІР‚в„ўР вЂ™Р’В»', 'node/' . $data['data']->nid) . '</div>';
      
      return $out;
      
      
      
    
    case 'rating':
      /*
      if (isset($data['data']->votingapi_cache_node_percent_overall_average_value) && $data['data']->votingapi_cache_node_percent_overall_average_value) {
                
        $out = theme('hr_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css')));
        
        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>' . $data['data']->votingapi_cache_node_percent_overall_count_value . ' ' . $all_data_quick[$data['data']->nid]['name'] . '</div><div>' . t('Reviews') . '</div></a></div>' . $out . ' <div class="count">(' . number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 ) . ')</div>';
      }
      */
      if (!empty($data['data']->votingapi_cache_node_percent_overall_average_value)) {
                
        $stars = theme('hr_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css')));
        
        //$out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>' . format_plural($data['data']->votingapi_cache_node_percent_overall_count_value, '1 Review', '@count Reviews') . '</div></a></div>' . $out . ' <div class="count">(' . number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 ) . ')</div>';
        
        
        $rating_count = number_format( (0.05 * $data['data']->votingapi_cache_node_percent_overall_average_value), 1 );
        /*
        global $user;
        if (!$user->uid) {
            $out = '<div class="details">
                      <a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>Read Reviews</div>
                      </a>
                    </div>
                    <div class="stars_n_count">' 
                        . $stars 
                        . ' <div class="count">(' . $rating_count . ')</div>
                    </div>';
        }
        else
        */
          {
            $out = '
                    <div class="stars_n_count">' 
                        . ' <div class="count">' . $rating_count . '<span> / 5</span></div>'
                        . $stars . '
                        
                    </div>' .
                    // Read Reviews
//                    '<div class="details">
//                      <a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>Read Reviews</div>
//                      </a>
//                    </div>' .
                    '';
        }
      }
      else {
        // Write a review
        ////$out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>Write Review</div></a></div>';
      }

      
      return $out;
      
      
      
      
    
      
      
      
    case 'rating_visit_review': // For Top 5 hosting sites block on a provider page/
            
      if (!empty($data['data']->votingapi_cache_node_percent_overall_average_value)) {
                
        //$out = '<div class="rating"><span>Rating: ' . number_format($data['data']->votingapi_cache_node_percent_overall_average_value * 0.05, 1) . '/5</span> ' . theme('hr_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css'))) . '</div>';
        $out = '<div class="rating"><span>Rating:</span> ' . theme('hr_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_overall_average_value, 'stars' => 5, 'tag' => 'overall', 'widget' => array('name' => 'stars', 'css' => 'stars.css'))) . '</div>';
        
        //$out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>' . format_plural($data['data']->votingapi_cache_node_percent_overall_count_value, '1 Review', '@count Reviews') . '</div></a></div>' . $out ;
      }
//      else {
//        $out = '<div class="details"><a ' . ( (isset($data['target']) && $data['target'] == 'iframe') ? 'target="_blank" ' : '') . 'href="' . url('node/' . $data['data']->nid) . '"><div>Write Review</div></a></div>';
//      }
      
      $out .= '<div class="p-links">' . hr_misc_getTrackingUrl('Visit Site', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', @$data['service_type']) . '<a class="review-link" href="' . url('node/' . $data['data']->nid) . '">Reviews</a></div>';
      
      return $out;
      
   
      
      
      
      
      
   case 'visit_n_reviews': // For Top 5 hosting sites block on a provider page/
      
      $out .= '<div class="p-links">' . hr_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', @$data['service_type']) . '<a class="review-link" href="' . url('node/' . $data['data']->nid) . '">READ REVIEWS</a></div>';
      
      return $out;
    
    
      
      
      
      
      
    case 'plan':
      
      return isset($all_data_quick[$data['data']->nid][$data['service_type']]['plan']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['plan'] : '';
      
      
      
      
      
      
      
    // Video Review from YouTube
    case 'vr-y':
            
      return isset($all_data_quick[$data['data']->nid][$data['service_type']]['vr-y']) 
                ? '<a class="yt-direct" href="http://www.youtube.com/embed/' . $all_data_quick[$data['data']->nid][$data['service_type']]['vr-y'] . '?rel=0&amp;wmode=transparent" title="' . $all_data_quick[$data['data']->nid]['name'] . ' Video Review">Watch</a>'
                : '';
      
    
      
      
      
      
      
    case 'trend':
      
      return isset($all_data_quick[$data['data']->nid][$data['service_type']]['trend']) ? $all_data_quick[$data['data']->nid][$data['service_type']]['trend'] : 0;
    
      
      
      
      
      
      
    case 'monthly':
    case 'back':
    case 'setup':
      
      $out = isset($all_data_quick[$data['data']->nid][$data['service_type']]['fees'][$target]) ? $all_data_quick[$data['data']->nid][$data['service_type']]['fees'][$target] : '';
      
      if ($target == 'monthly' && $out) {
        
        $out = ($data['service_type'] == 'ca' ? 'CAD$' : '$') . $out;
        if (!empty($all_data_quick[$data['data']->nid][$data['service_type']]['fees']['monthly-crossed']) && strpos($all_data_quick[$data['data']->nid][$data['service_type']]['fees']['monthly-crossed'], '-') !== 0) {
          $out = '<div class="price month non-crossed">'. $out . '</div>';
          // Crossed out price
          ///$out = '<div class="price month crossed">' . ($data['service_type'] == 'ca' ? 'CAD$' : '$') . $all_data_quick[$data['data']->nid][$data['service_type']]['fees']['monthly-crossed'] . '<div class="cross"></div></div>' . $out;
        }

      }
      return $out;
      
    
      
      
      
      
      
    // Deprecated.
    case 'i_web':
      
      $url = isset($all_data_quick[$data['data']->nid][$target]) ? $all_data_quick[$data['data']->nid][$target] : '';

      return $url;
      
      
      
      
      
      
      
    case 'i_web2':
      
      /*
      //$url = isset($all_data_quick[$data['data']->nid]['i_web']) ? $all_data_quick[$data['data']->nid]['i_web'] : '';
      //$out = l('Visit Site', $url, array('attributes' => array('target' => '_blank', 'class' => 'site')));
      
      //hr_misc_getTrackingUrl($title_or_wrapped_object, $subpath = NULL, $nid = NULL, $target_name = NULL, $a_class = NULL, $service_type = NULL) {
      
//      
//      if (!$user->uid) {
//        //$out = hr_misc_getTrackingUrl('Visit Site', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', @$data['service_type']);
//        $out = hr_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', @$data['service_type']);
//      }
//      else 
        {
        //$out = hr_misc_getTrackingUrl('Visit Site', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', @$data['service_type']);
        $out = hr_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', @$data['service_type']);
      }
      
//      if ($user->uid) 
      {
        $out .= hr_misc_getTrackingUrl('Visit ' . $all_data_quick[$data['data']->nid]['name'], NULL, $data['data']->nid, NULL, 'visit visit-site-link', @$data['service_type']);
      }
      */
      
      $out = '<div class="p-links">' . '<a class="review-link" href="' . url('node/' . $data['data']->nid) . '">READ REVIEWS</a>' . hr_misc_getTrackingUrl('', NULL, $data['data']->nid, NULL, 'reviews visit-site-btn', @$data['service_type']) . '</div>';
      
      return $out;

  }
}


/**
 * Gets grade from rating for a provider.
 */
function hr_misc_getProviderGradeFromRating($r) {
  
  if ($r > 5) {
    $r = number_format( (0.05 * $r), 1 );
  }
  
  $grades = array(
    'A+' => array(4.8, 5.0),
    'A' => array(4.4, 4.7),
    'A-' => array(4.2, 4.3),

    'B+' => array(4.0, 4.1),
    'B' => array(3.7, 3.9),
    'B-' => array(3.3, 3.6),

    'C+' => array(3.1, 3.2),
    'C' => array(2.9, 3.0),
    'C-' => array(2.5, 2.8),

    'D+' => array(2.1, 2.4),
    'D' => array(1.9, 2.0),
    'D-' => array(1.6, 1.8),

    'F' => array(1.0, 1.5),
  );
  
  foreach ($grades as $grade => $borders) {
    if ($r >= $borders[0] && $r <= $borders[1]) {
      return $grade;
    }
  }
  
  return '';
}


/**
 * Return themed field content for a view.
 */
function  hr_misc_getFieldThemed_forView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'blog_post_thumb':
      
      //echo '<div class="logo"><a href="' . $node->p_data['info']['i_web'] . '" target="_blank">' . theme('image_style', array( 'path' =>  $content['field_p_logo'][0]['#item']['uri'], 'style_name' => 'logo_provider_page', 'alt' => $content['field_p_logo'][0]['#item']['alt'], 'title' => $content['field_p_logo'][0]['#item']['title'], 'attributes' => array('rel' => 'v:photo'))) . '</a></div>'; 
      
      //$out = '<a href="#">Test-' . $data['data']->nid . '</a>';
      
      $query = db_select('field_data_field_main_image', 'mi')
        ->fields('mi', array('field_main_image_value'));
      $query->condition('entity_id', $data['data']->nid);
      $main_image = unserialize($query->execute()->fetchField());
      
      if (@$main_image['uri']) {
        //$out = '<div class="block-thumb">' . theme('image_style', array( 'path' =>  $main_image['uri'], 'style_name' => 'block_thumb', 'alt' => @$main_image['alt'], 'title' => $data['data']->node_title)) . '</div>';
        $out = '<span class="block-thumb">' . theme('hr_misc_image_style', array('style_name' => 'block_thumb', 'src' => $main_image['src'], 'path' => $main_image['uri'], 'alt' =>  (@$main_image['alt'] ? $main_image['alt'] : $data['data']->node_title), 'title' => $data['data']->node_title )) . '</span>';
      }
      
      //dpm($main_image);
      //dpm($out);

      return $out;
  }
  
}


/**
 * Return specific variable value for a provider depending on the filter value (business OR residential, etc)
 */
function hr_misc_getProviderData_fromView($target, $data) {
  
  $out = '';
  
  switch($target) {
    
    case 'service_types':
      $service_types = unserialize(SERVICE_TYPES);
      $p_service_types = $data['data']->_field_data['nid']['entity']->field_p_types['und'];
      $types = '';
      foreach ($p_service_types as $p_service_type) {
        
        $service_type_key = hr_misc_refineServiceTypeKey($p_service_type['value']);
        
        if ($p_service_type['value'] == $data['exposed_raw_input']['type']) {
          //$current_type = '<div class="type main">' . drupal_ucfirst($p_service_type['value']) . '</div>';
          $current_type = '<div class="type main">' . $service_types[$service_type_key] . '</div>';
        }
        else {
          //$types .= '<div class="type">' . drupal_ucfirst($p_service_type['value']) . '</div>';
          $types .= '<div class="type">' . $service_types[$service_type_key] . '</div>';
        }
      }
      
      if ($types) {
        return $current_type . '<div class="descr">' . t('(currently exposed)') . '</div>' . $types;
      }
      else {
        return $current_type;
      }
      
      break; // End of case 'service_types':
    
      
      
    case 'user_rating':
      $out = '';
      if (isset($data['data']->votingapi_cache_node_percent_features_average_value) && $data['data']->votingapi_cache_node_percent_features_average_value) {
                
        $out = theme('hr_misc_fivestar_static', array('rating' => $data['data']->votingapi_cache_node_percent_features_average_value, 'stars' => 5, 'tag' => 'features', 'widget' => array('name' => 'hearts', 'css' => 'hearts.css')))
              //. '<div class="rating">' . $data['data']->votingapi_cache_node_percent_features_average_value . '%</div>'
              . '<div class="voters">' . $data['data']->votingapi_cache_node_percent_features_count_value . ' ' . t('reviews') . '</div>'
              ;
      }
      $out .= '<div class="details">' . l(t('Details'), 'node/' . $data['data']->nid) . '</div>';
      break;
    
      
      
    case 'monthly_fees':
    case 'longdistance_fees':
    case 'setup_fees':
      
      if (!$all_fees = @$_SESSION['all_fees']) {
        $all_fees = hr_misc_getProvidersFees();
        $_SESSION['all_fees'] = $all_fees;
      }
      
      $p_fees = $all_fees[$data['data']->nid];
      
      $service_type_key = hr_misc_refineServiceTypeKey($data['exposed_raw_input']['type']);
      
      // Refine the fee key for the new provider structure.
      if (isset($p_fees['bu']['mon'])) {
        $old_fee_types = array('mon' => 'monthly_fees', 'set' => 'setup_fees', 'shp' => 'shipping_fees', 'can' => 'cancel_fees', 'lng' => 'longdistance_fees', 'oth' => 'other_fees' );
        $target = array_shift(array_keys($old_fee_types, $target));
      }
      
      if (isset($p_fees[$service_type_key][$target]) && $p_fees[$service_type_key][$target]) {
        return '$' . $p_fees[$service_type_key][$target];
      }
      
      break; // End of case 'monthly_fees':
    
      
      
      
    case 'plan':
      if (!$p_data = unserialize($data['data']->field_field_p_data[0]['raw']['value'])) {
        return NULL;
      }
      
      $service_type_key = hr_misc_refineServiceTypeKey($data['exposed_raw_input']['type']);
      
      $service_types = unserialize(SERVICE_TYPES);
      $service_descriptions = unserialize(SERVICE_DESCRIPTIONS);
      //$fee_types = unserialize(FEE_TYPES);

      $load_key = 's';
      
      $p_services = $p_data['s'];
      
      if ($load_key == 's') {
        if (isset($p_services[$service_type_key]['pti'])) {
          $out = '<div class="plan">' . $p_services[$service_type_key]['pti'] . '</div>';
        }
        if (isset($p_services[$service_type_key]['weights_' . $service_type_key . '_features'])) {
          $features = $p_services[$service_type_key]['weights_' . $service_type_key . '_features'];
        }
      }
      
      
      if (is_array($features)) {
        $out .= '<div class="features">';
        $count = 0;
        foreach ($features as $feature) {
          $out .= '<div class="feature">' . $feature['name'] . '</div>';
          if ($count++ > 1) {
            break;
          }
        }
        $out .= '</div>';
      }
      break; // End of case 'features':
  }
  
  return $out;
}


function hr_misc_refineServiceTypeKey($source_key) {
  if ($source_key == 'residential') {
    return 're';
  }
  elseif ($source_key == 'business') {
    return 'bu';
  }
  else {
    return $source_key;
  }
}


function hr_misc_refineServiceTypeKey_Reverse($source_key) {
  if ($source_key == 're') {
    return 'residential';
  }
  elseif ($source_key == 'bu') {
    return 'business';
  }
  else {
    return $source_key;
  }
}


/**
 * Forms API validation function for email.
 */
function hr_misc_elementValidate_email($element, &$form_state) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}  


/**
 * Forms API validation function for url.
 */
function hr_misc_elementValidate_url($element, &$form_state) {
  if (!empty($element['#value']) && !valid_url($element['#value'])) {
    form_error($element, t('Please enter a valid url address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}


/**
 * Helper function for sorting by weight with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_weight, 'hr_misc_sortArrayByWeight');
 */
function hr_misc_sortArrayByWeight($a, $b) 
{
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}



/**
 * Helper function for sorting by clicks with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'hr_misc_sortArrayByСlicks');
 */
function hr_misc_sortArrayByClicks($a, $b) {
  if ($a['clicks'] == $b['clicks']) {
      return 0;
  }
  return ($a['clicks'] < $b['clicks']) ? -1 : 1;
}
function hr_misc_sortArrayByClicksReverse($a, $b) {
  if ($a['clicks'] == $b['clicks']) {
      return 0;
  }
  return ($a['clicks'] > $b['clicks']) ? -1 : 1;
}


/**
 * Helper function for sorting by clicks_unique with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'hr_misc_sortArrayByClicksUnique');
 */
function hr_misc_sortArrayByClicksUnique($a, $b) {
  if ($a['clicks_unique'] == $b['clicks_unique']) {
      return 0;
  }
  return ($a['clicks_unique'] < $b['clicks_unique']) ? -1 : 1;
}
function hr_misc_sortArrayByClicksUniqueReverse($a, $b) {
  if ($a['clicks_unique'] == $b['clicks_unique']) {
      return 0;
  }
  return ($a['clicks_unique'] > $b['clicks_unique']) ? -1 : 1;
}


/**
 * Helper function for sorting by name with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'hr_misc_sortArrayByName');
 */
function hr_misc_sortArrayByName($a, $b) {
  $aa = strtolower($a['name']); $bb = strtolower($b['name']);
  //if ($a['name'] == $b['name']) {
  if ($aa == $bb) {
      return 0;
  }
  //return ($a['name'] < $b['name']) ? -1 : 1;
  return ($aa < $bb) ? -1 : 1;
}
/**
 * Helper function for sorting by node_title with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_name, 'hr_misc_sortArrayByObjectsNodeTitle');
 */
function hr_misc_sortArrayByObjectsNodeTitle($a, $b) {
  $aa = strtolower($a->node_title); $bb = strtolower($b->node_title);
  //if ($a['name'] == $b['name']) {
  if ($aa == $bb) {
      return 0;
  }
  //return ($a['name'] < $b['name']) ? -1 : 1;
  return ($aa < $bb) ? -1 : 1;
}


function hr_misc_sortArrayByNameReverse($a, $b) {
  $aa = strtolower($a['name']); $bb = strtolower($b['name']);
  //if ($a['name'] == $b['name']) {
  if ($aa == $bb) {
      return 0;
  }
  //return ($a['name'] > $b['name']) ? -1 : 1;
  return ($aa > $bb) ? -1 : 1;
}


/**
 * Socialite social buttons.
 */
function hr_blocks_getSocialiteButtons($url = NULL, $title = NULL) {

  if (!$url) {
    $url = 'http://hostingreview.org' . ($_GET['q'] == 'home' ? '' : $_SERVER['REQUEST_URI']);
  }
  
  drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.min.js');
  //drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.js');
  
  $path_to_custom_js = drupal_get_path('module', 'hr_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'addSocialite.js');
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . $url . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . $url . '&amp;t=' . $title . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . $url . '&amp;title=' . $title . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
    
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="vertical" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="tall" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="box_count" data-width="70" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="top" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  
  

  
  
  return $out;
}


/**
 * AddThis social Like buttons set.
 */
function hr_blocks_getAddThisButtonsLike() {

  $out = '
    <!-- AddThis Button BEGIN -->
  <div class="addthis_toolbox addthis_default_style ">
  <a class="addthis_button_linkedin_counter"></a>
  <a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
  <a class="addthis_button_facebook_like" fb:like:layout="button_count" fb:like:locale="en_US"></a>
  <a class="addthis_button_tweet"></a>
  </div>
  <script type="text/javascript">var addthis_config = {"data_track_addressbar":true, ui_language:"en", locale:"en_US"};</script>
  <script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-50253baf64925d35"></script>
  <!-- AddThis Button END -->
  ';
  
  return $out;
}


/**
 * Element Validate for email.
 */
function hr_misc_validate_email($element, &$form_state) {
   if (!preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/', $element['#value'])) {
     form_error($element, 'Wrong email format!');
   }
}


/**
 * Implements hook_form().
 *
 * @return $form
 *   Return nothing.
 */
function hr_misc_sendMessageAndNewsletterSubscribe_form($form, &$form_state) {
  
  global $user;
  
  /*
  $form['title'] = array(
    //'#markup' => '<div class="title">Sign up to receive weekly updates</div>',
    '#markup' => '<div class="title">Stay informed - <br>Sign up for our newsletter.</div>',
  );
  */
  
  $form['name'] = array(
    '#type' => 'container',
  );
    $form['name']['fname'] = array(
      '#type' => 'textfield',
      //'#required' => TRUE,
      '#attributes' => array('title' => 'First name *'),
    );
    $form['name']['lname'] = array(
      '#type' => 'textfield',
      //'#required' => TRUE,
      '#attributes' => array('title' => 'Last name'),
    );
  
  $form['email'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array('title' => 'Email *'),
  );
  
  $form['m_and_s'] = array(
    '#type' => 'container',
  );
    $form['m_and_s']['message'] = array(
      '#type' => 'textarea',
      //'#required' => TRUE,
      '#attributes' => array('title' => 'Message *'),
    );
    $form['m_and_s']['subscribe'] = array(
      '#type' => 'checkbox',
      '#default_value' => FALSE,
      '#title' => 'Sign me up for the newsletter',
    );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Send',
  ); 
  
  
  // Add stars widgets to a Rating block
  $module_path = drupal_get_path('module', 'hr_misc');

  $form['#attached']['js'] = array(
    // Add hints inside some fields
    $module_path . '/js/hr_SendMsgNnewsletterSubscr_fieldHints.js',
  );

  
  return $form;
}


/**
 * Implements hook_form_validate().
 *
 * @return $form
 *   Return nothing.
 */
function hr_misc_sendMessageAndNewsletterSubscribe_form_validate(&$form, &$form_state) {
  
  //drupal_set_message('In Validate!', 'warning');
  //dpm($form_state['values']);
  //dpm($form);
    
  global $user;
  
  
  // Clear hints, if any.
  $fields_to_clear_hints = array('email' => array('title' => 'Email', 'hint' => @$form['email']['#attributes']['title'], 'required' => TRUE),
                                 'fname' => array('title' => 'First Name', 'hint' => @$form['name']['fname']['#attributes']['title'], 'required' => FALSE),
                                 'lname' => array('title' => 'Last Name', 'hint' => @$form['name']['lname']['#attributes']['title'], 'required' => FALSE),
                                 'message' => array('title' => 'Message', 'hint' => @$form['m_and_s']['message']['#attributes']['title'], 'required' => FALSE),
                            );
  
  foreach ($fields_to_clear_hints as $fname => $fdata) {
   
    if ($form_state['values'][$fname] == $fdata['hint']) {
      
      // This clear the field.
      $form[$fname]['#value'] = NULL;
      
      // Just in case.
      // BUT! It causes fatal eror with #parent index absence
      //form_set_value($form[$fdata['set']][$fname], array('#value' => NULL), $form_state);
      
      // Just in case on more.
      $form_state['values'][$fname] = NULL;
      
      if ($fdata['required']) {
        form_set_error($fname, 'Please fill the field "' . $fdata['title'] . '"');
      }
      
    }
    elseif ($fname == 'email' && !preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/', $form_state['values'][$fname])) {
      form_set_error($fname, 'Wrong email format!');
      $form_state['values']['email'] = NULL;
    }
    
  }
  
  // Check if submitted email was submitted previously.
  if ($form_state['values']['email']) {
    
      if(!empty($form_state['values']['subscribe'])) {
        $query = db_select('hr_emails_subscribed', 'e')  
              ->fields('e', array('email'));
        $query->condition('e.email', $form_state['values']['email']);
        $email = $query->execute()->fetchField();
        if ($email) {
          form_set_error('email', 'Email ' . $form_state['values']['email'] . ' has been submitted already!');
        }
        
        if ($form_state['values']['message'] && !$form_state['values']['fname']) {
          form_set_error('fname', 'You have to enter a First Name, if you want to send a message.');
        }
      }
      else {
        // Check the rest of fields if not just subscribe.
        if (!$form_state['values']['fname']) {
          form_set_error('fname', 'You have to enter a First Name, if don\'t want to just subscribe to newsletters');
        }
        if (!$form_state['values']['message']) {
          form_set_error('message', 'You have to enter a Message, if don\'t want to just subscribe to newsletters');
        }
      }
  }
  
  
}


/**
 * Implements hook_form_submit().
 *
 * @return $form
 *   Return nothing.
 */
function hr_misc_sendMessageAndNewsletterSubscribe_form_submit(&$form, &$form_state) {
 
  global $user;
  if (!empty($form_state['values']['subscribe'])) {
    
    $verification_code = md5(time());
    db_insert('hr_emails_subscribed')
      ->fields(array(
        'email'=> $form_state['values']['email'],
        'fname'=> $form_state['values']['fname'],
        'lname'=> $form_state['values']['lname'],
        'ip' => $user->hostname,
        'timestamp'=> time(),
        'code' => $verification_code,
      ))
      ->execute();

    //hr_misc_sendMessage('email_verification', array('verification_code' => $verification_code . '=' . urlencode($form_state['values']['email']), 'email' => $form_state['values']['email']));

    drupal_set_message('Thank you for subscribing to our newsletter.');
  }
  
  
  
  if (!empty($form_state['values']['message'])) {
    db_insert('hr_user_messages')
      ->fields(array(
        'email'=> $form_state['values']['email'],
        'ip' => $user->hostname,
        'timestamp'=> time(),
        'fname' => $form_state['values']['fname'],
        'lname' => $form_state['values']['lname'],
        'message' => $form_state['values']['message'],
      ))
      ->execute();

    hr_misc_sendMessage('user_message', array('fname' => $form_state['values']['fname'], 'lname' => $form_state['values']['lname'], 'email' => $form_state['values']['email'], 'message' => $form_state['values']['message'], 'subscribed' => ($form_state['values']['subscribe'] ? 'Yes' : 'No') ));

    drupal_set_message('Your message has been submitted. We will review it as soon as possibly!');
  }
  
  drupal_goto(ltrim(@$_SERVER['REDIRECT_URL'], '/'), array('query' => array('nocache' => 1)));
}


/**
 * Set breadcrumbs for the page, used in the template.php
 */
function hr_misc_setBreadcrumbs(&$variables) {
  
  $tags_cloud_pages = array('/articles/tags', '/blog/tags', '/news/tags');
  $not_teasers_types = array('preface', 'admin_page', 'page', 'quote', 'webform');
  
  global $current_tag_title;
  
  //dpm($_SERVER);
  //dpm($_SERVER['REQUEST_URI']);
  
  //dpm($current_tag_title);
  //dpm(arg());
  
  if(@$_SERVER['REQUEST_URI'] == '/') {
    $variables['breadcrumb'] = ''; // Home page has no bredcrumb.
  }
  elseif(isset($variables['node']) && !in_array($variables['node']->type, $not_teasers_types) ) {
    //dpm($variables['node']);
    //dpm('not-teasers node------------');
    switch ($variables['node']->type) {
      case 'provider':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Providers', 'providers'), $variables['node']->field_p_name['und'][0]['value'] . ' Review')));
        break;
//      case 'review':
//        if (!empty($variables['node']->field_ref_provider['und'][0]['target_id'])) {
//          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Providers', 'providers'), l($variables['node']->field_r_provider_name['und'][0]['value'] . ' Review', 'node/' . $variables['node']->field_ref_provider['und'][0]['target_id']), $variables['node']->title )));
//        }
//        else {
//          $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Providers', 'providers'), $variables['node']->title )));
//        }
//        break;
      
//      case 'article':
//        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('Library', 'about-voip-services'), $variables['node']->title )));
//        break;
      case 'blog_post':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), $variables['node']->title )));
        break;
//      case 'news_post':
//        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Articles', 'articles'), l('News', 'news'), $variables['node']->title )));
//        break;
    }
  }
  /*
  elseif(in_array($_SERVER['REQUEST_URI'], $tags_cloud_pages)) {
    //dpm('Tags cloud page ------------');
    switch ($_SERVER['REQUEST_URI']) {
      case '/articles/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library articles', 'about-voip-services'), 'Library tags' )));
        break;
      case '/blog/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), 'Blog tags' )));
        break;
      case '/news/tags':
        $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), 'News tags' )));
        break;
    }
  }
  */
//  elseif($current_tag_title) {
//    if (strpos($_SERVER['REQUEST_URI'], 'features/') != FALSE) {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Types Of VoIP', 'types'), l('VoIP Features', 'features'), $current_tag_title )));
//    }
//    elseif(strpos($_SERVER['REQUEST_URI'], 'equipment/') != FALSE) {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Types Of VoIP', 'types'), l('VoIP Equipment', 'equipment'), $current_tag_title )));
//    }
//    elseif (strpos($_SERVER['REQUEST_URI'], 'protocols/') != FALSE) {
//      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Types Of VoIP', 'types'), l('VoIP Protocols', 'protocols'), $current_tag_title )));
//    }
//  }
  /*
  elseif(strpos($_SERVER['REQUEST_URI'], '/tags/') != FALSE) {
    //dpm('Tag page ------------');
    
    // Don't show anything yet.
    //$variables['breadcrumb'] = '';
    
    // Defined in
    global $current_tag_title;
  
    if(strpos($_SERVER['REQUEST_URI'], 'articles/tags/') != FALSE) {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Library articles', 'about-voip-services'), l('Articles tags', 'articles/tags'), $current_tag_title )));
    }
    elseif (strpos($_SERVER['REQUEST_URI'], 'blog/tags/') != FALSE) {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('Blog', 'blog'), l('Blog tags', 'blog/tags'), $current_tag_title )));
    }
    else {
      $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('News', 'news'), l('News tags', 'news/tags'), $current_tag_title )));
    }

  }
  */
  elseif ($breadcrumb = hr_misc_getMenuTrail()) {
    //dpm('Page VIA MENU------------');
    $variables['breadcrumb'] = $breadcrumb;
  }
  elseif (isset($variables['node'])) {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $variables['node']->title )));
  }
  elseif (@$_SERVER['REDIRECT_URL'] == '/voip-provider-submit-user-review') {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Provider Review' )));
  }
  elseif (@$_SERVER['REDIRECT_URL'] == '/voip-phone-submit-user-review') {
    //dpm('Any other NODE page------------');
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), 'Submit Phone Review' )));
  }
  elseif (arg(0) == 'user' && is_int($arg_uid = arg(1))) {
    //dpm('User profile page------------');
    $userExtendedData = hr_misc_loadUserExtendedData($arg_uid);
    $variables['breadcrumb'] = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l('About Us', 'about-us'), l('Our Team', 'our-team'), $userExtendedData->realname )));
  }
  else {
    //dpm('Any other NOT node page------------');
    $variables['breadcrumb'] = '';
  }
} 



/**
 * Adding possibility to get total results count from a paged query without qeriing it again without pager.
 * 
 * http://drupal.stackexchange.com/questions/80381/can-we-get-full-count-of-results-from-a-query-that-is-extended-by-pagerdefault
 * 
 * Example of call:
 * 
 * $query = db_select('hr_track_links', 'tl')->extend('ChPager'); // Instead of $query = db_select('hr_track_links', 'tl')->extend('PagerDefault');
 * ...
 * $results = $query->orderBy($sort, $order)->limit(20)->execute();
 * $total_items = $query->getTotalItemCount();
 */
// 
class ChPager extends PagerDefault {

  /**
   * Overrides PagerDefault::execute().
   */
  public function execute() {
    // Add convenience tag to mark that this is an extended query. We have to
    // do this in the constructor to ensure that it is set before preExecute()
    // gets called.
    if (!$this->preExecute($this)) {
      return NULL;
    }

    // A NULL limit is the "kill switch" for pager queries.
    if (empty($this->limit)) {
      return;
    }
    $this->ensureElement();

    // Get the total items from our new statically cached function.
    $total_items = $this->getTotalItemCount();

    $current_page = pager_default_initialize($total_items, $this->limit, $this->element);
    $this->range($current_page * $this->limit, $this->limit);

    // Now that we've added our pager-based range instructions, run the query normally.
    return $this->query->execute();
  }

  /**
   * Cache the results of PagerDefault::getCountQuery().
   */
  public function getTotalItemCount() {
    static $total_items = NULL;

    if ($total_items === NULL) {
      $total_items = $this->getCountQuery()->execute()->fetchField();
    }

    return $total_items;
  }

}